<?php

namespace ParametrageBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * EtapeCreationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EtapeCreationRepository extends EntityRepository {

    public function getListEtapePole() {
        $query = $this->createQueryBuilder('et')->join('et.etape', 'e')->addSelect('e');
        $query->where('e.routePole is not null');
        return $query->getQuery()->getResult();
    }

    public function getNextStep($ordre) {
        $query = $this->createQueryBuilder('et')
                        ->where('et.ordre > :idO')
                        ->setMaxResults(1)->setParameter('idO', $ordre)->orderBy('et.ordre');
        $firstResult = $query->getQuery()->getOneOrNullResult();
        return $firstResult;
    }
	


    public function getNextStepFormeJuridique($ordre, $formeJuridique, $isAguipe) {
        $query = $this->createQueryBuilder('et')->join('et.etape', 'e')
                        ->where('et.ordre > :idO')->andWhere('et.formeJuridique =:formeJuridique')
                        ->setParameter('formeJuridique', $formeJuridique)->setParameter('idO', $ordre);
        if ($isAguipe == false) {
            $query->andWhere('e.pole is null');
        }
        $query->setMaxResults(1)->orderBy('et.ordre');
        $firstResult = $query->getQuery()->getOneOrNullResult();
        return $firstResult;
    }

    public function getNextStepPole($ordre, $idFormeJ) {
        $query = $this->createQueryBuilder('et')->join('et.etape', 'e')
                        ->where('e.routePole is not null')->andWhere('et.formeJuridique =:formeJuridique')
                        ->andWhere('et.ordre > :idO')->setParameter('formeJuridique', $idFormeJ)
                        ->setMaxResults(1)->setParameter('idO', $ordre)->orderBy('et.ordre');
        $firstResult = $query->getQuery()->getOneOrNullResult();
        return $firstResult;
    }

    public function getStepPoleBefore($ordre, $idFormeJ) {
        $query = $this->createQueryBuilder('et')->join('et.etape', 'e')
                        ->where('e.routePole is not null')
                        ->andWhere('et.ordre < :idO')->andWhere('et.formeJuridique =:formeJuridique')
                        ->setParameter('formeJuridique', $idFormeJ)->setMaxResults(1)->setParameter('idO', $ordre)->orderBy('et.ordre', 'desc');
        $firstResult = $query->getQuery()->getOneOrNullResult();
        return $firstResult;
    }

    public function getLastStepPole() {
        $query = $this->createQueryBuilder('et')->join('et.etape', 'e')
                        ->where('e.routePole is not null')
                        ->setMaxResults(1)->orderBy('et.ordre', 'desc');
        $firstResult = $query->getQuery()->getOneOrNullResult();
        return $firstResult;
    }

    public function getFirstStepPole() {
        $query = $this->createQueryBuilder('et')->join('et.etape', 'e')
                        ->where('e.routePole is not null')
                        ->setMaxResults(1)->orderBy('et.ordre', 'asc');
        $firstResult = $query->getQuery()->getOneOrNullResult();
        return $firstResult;
    }

    public function getCurrentStepPole($currentRoute) {
        $query = $this->createQueryBuilder('et')->join('et.etape', 'e')
                ->where('e.routePole = :currentRoute')
                ->setParameter('currentRoute', $currentRoute);
        $firstResult = $query->getQuery()->getOneOrNullResult();
        return $firstResult;
    }

    public function getNextEtapePoleRoute($currentRoute, $idFormeJ) {
        $em = $this->_em;
        //die(dump($currentRoute));
        $etape = $em->getRepository('ParametrageBundle:Fonctionnalite')->findOneBy(array('routePole' => $currentRoute));
        $etapeC = $em->getRepository('ParametrageBundle:EtapeCreation')->findOneBy(array('etape' => $etape->getId(), 'formeJuridique' => $idFormeJ));
        $ordre = 1;
        if ($etapeC) {
            $ordre = $etapeC->getOrdre();
        }
        $etapeSuivant = $this->getNextStepPole($ordre, $idFormeJ);
        $rteSuivant = "";
        if ($etapeSuivant) {
            $rteSuivant = $etapeSuivant->getEtape()->getRoutePole();
        }
        return $rteSuivant;
    }

    public function getPreviousEtapePoleRoute($currentRoute, $idFormeJ) {
        $em = $this->_em;
        //die($currentRoute);
        $etape = $em->getRepository('ParametrageBundle:Fonctionnalite')->findOneBy(array('routePole' => $currentRoute));
        $etapeC = $em->getRepository('ParametrageBundle:EtapeCreation')->findOneBy(array('etape' => $etape->getId(), 'formeJuridique' => $idFormeJ));
        $ordre = 1;
        if ($etapeC) {
            $ordre = $etapeC->getOrdre();
        }
        $etapeSuivant = $this->getPreviousStepPole($ordre);
        $rteSuivant = "";
        if ($etapeSuivant) {
            $rteSuivant = $etapeSuivant->getEtape()->getRoutePole();
        }
        return $rteSuivant;
    }

    public function getLastEtapePoleRoute($currentRoute) {
        $em = $this->_em;
        //die($currentRoute);
        $etape = $em->getRepository('ParametrageBundle:Fonctionnalite')->findOneBy(array('routePole' => $currentRoute));
        $etapeC = $em->getRepository('ParametrageBundle:EtapeCreation')->findOneBy(array('etape' => $etape->getId()));
        $ordre = 1;
        if ($etapeC) {
            $ordre = $etapeC->getOrdre();
        }
        $etapeSuivant = $this->getLastStepPole();
        $rteSuivant = "";
        if ($etapeSuivant) {
            $rteSuivant = $etapeSuivant->getEtape()->getRoutePole();
        }
        return $rteSuivant;
    }

    public function getEtapePoleRouteBefore($currentRoute, $idFormeJ) {
        $em = $this->_em;
        //die($currentRoute);
        $etape = $em->getRepository('ParametrageBundle:Fonctionnalite')->findOneBy(array('routePole' => $currentRoute));
        $etapeC = $em->getRepository('ParametrageBundle:EtapeCreation')->findOneBy(array('etape' => $etape->getId(), 'formeJuridique' => $idFormeJ));
        $ordre = 1;
        if ($etapeC) {
            $ordre = $etapeC->getOrdre();
        }
        $etapeSuivant = $this->getStepPoleBefore($ordre, $idFormeJ);
        $rteSuivant = "";
        if ($etapeSuivant) {
            $rteSuivant = $etapeSuivant->getEtape()->getRoutePole();
        }
        return $rteSuivant;
    }

    public function getListeEtapeBrouillonByLangue($langue, $isAguipe, $idFormJ) {

        $query = $this->createQueryBuilder('et')->join('et.formeJuridique', 'f')
                ->join('et.etape', 'e')->innerJoin('e.fonctionnaliteTraductions', 'tr')
                ->where('f.id=:idF')
                ->setParameter('idF', $idFormJ);

        if ($isAguipe == false) {
            $query->andWhere('e.pole is null');
        }
        $query->orderBy('et.ordre', 'ASC');

        $results = $query->getQuery()->getResult();

        //die(dump($results));

        $tabResult = array();
        $i = 0;
        foreach ($results as $result) {

            $tabResult[$i]['id'] = $result->getId();
            $tabResult[$i]['route'] = $result->getEtape()->getRoute();
            $tabResult[$i]['ordre'] = $result->getOrdre();
			$tabResult[$i]['titre'] = "";
            foreach ($result->getEtape()->getFonctionnaliteTraductions() as $traductions)
                if ($traductions->getLangue() == $langue) {
                    $tabResult[$i]['titre'] = $traductions->getLibelle(); //die(dump($traductions->getLibelle()));
                }


            $formJ = $result->getFormeJuridique();
            if ($formJ) {
                $idf = $formJ->getId();
                $tabResult[$i]['idFormeJ'] = $idf;
                $formJTrad = $this->getEntityManager()->getRepository('BanquemondialeBundle:FormeJuridiqueTraduction')->getLibelleFormeJuridiqueByLanque($langue->getId(), $idf);

                ($formJTrad) ? $tabResult[$i]['libbelleFormeJ'] = $formJTrad->getLibelle() : $tabResult[$i]['libbelleFormeJ'] = "";
            } else {
                $tabResult[$i]['libbelleFormeJ'] = "";
            }

            $i++;
        }


        //die(dump($tabResult));
        return $tabResult;
    }

    public function getListEtapeBrouillonByLangue($langue) {
        $query = $this->createQueryBuilder('et')
                //->add('select', 'et, e,tr')           
                ->join('et.etape', 'e')
                ->innerJoin('e.fonctionnaliteTraductions', 'tr');
        $query->orderBy('et.ordre', 'ASC');

        $results = $query->getQuery()->getResult();

        //die(dump($results));

        $tabResult = array();
        $i = 0;
        foreach ($results as $result) {

            $tabResult[$i]['id'] = $result->getId();
            $tabResult[$i]['route'] = $result->getEtape()->getRoute();
            $tabResult[$i]['ordre'] = $result->getOrdre();

            foreach ($result->getEtape()->getFonctionnaliteTraductions() as $traductions)
                if ($traductions->getLangue() == $langue) {
                    $tabResult[$i]['titre'] = $traductions->getLibelle(); //die(dump($traductions->getLibelle()));
                }

            $formJ = $result->getFormeJuridique();
            if ($formJ) {
                $idf = $formJ->getId();
                $tabResult[$i]['idFormeJ'] = $idf;
                $formJTrad = $this->getEntityManager()->getRepository('BanquemondialeBundle:FormeJuridiqueTraduction')->getLibelleFormeJuridiqueByLanque($langue->getId(), $idf);

                ($formJTrad) ? $tabResult[$i]['libbelleFormeJ'] = $formJTrad->getLibelle() : $tabResult[$i]['libbelleFormeJ'] = "";
            } else {
                $tabResult[$i]['libbelleFormeJ'] = "";
            }

            $i++;
        }


        //die(dump($tabResult));
        return $tabResult;
    }

    public function getListEtapePoleByLangue($langue) {
        $query = $this->createQueryBuilder('et')
                //->add('select', 'et, e,tr')            
                ->join('et.etape', 'e')
                ->innerJoin('e.fonctionnaliteTraductions', 'tr')
                ->where('e.routePole is not null')
                ->orderBy('et.ordre', 'ASC');

        $results = $query->getQuery()->getResult();

        // die(dump($results));

        $tabResult = array();
        $i = 0;
        foreach ($results as $result) {

            $tabResult[$i]['id'] = $result->getId();
            $tabResult[$i]['routePole'] = $result->getEtape()->getRoutePole();

            foreach ($result->getEtape()->getFonctionnaliteTraductions() as $traductions)
                if ($traductions->getLangue() == $langue) {
                    $tabResult[$i]['titre'] = $traductions->getLibelle(); //die(dump($traductions->getLibelle()));
                }

            $i++;
        }


        //die(dump($tabResult));
        return $tabResult;
    }

    public function getListeEtapePoleByLangue($langue, $idFormJ) {
        $query = $this->createQueryBuilder('et')->join('et.formeJuridique', 'f')
                ->join('et.etape', 'e')
                ->innerJoin('e.fonctionnaliteTraductions', 'tr')
                ->where('f.id=:idF')->andWhere('e.routePole is not null')
                ->setParameter('idF', $idFormJ)
                ->orderBy('et.ordre', 'ASC');

        $results = $query->getQuery()->getResult();

        // die(dump($results));

        $tabResult = array();
        $i = 0;
        foreach ($results as $result) {

            $tabResult[$i]['id'] = $result->getId();
            $tabResult[$i]['routePole'] = $result->getEtape()->getRoutePole();

            foreach ($result->getEtape()->getFonctionnaliteTraductions() as $traductions)
                if ($traductions->getLangue() == $langue) {
                    $tabResult[$i]['titre'] = $traductions->getLibelle(); //die(dump($traductions->getLibelle()));
                }

            $i++;
        }


        //die(dump($tabResult));
        return $tabResult;
    }

}
