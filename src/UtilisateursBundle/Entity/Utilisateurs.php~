<?php

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

namespace UtilisateursBundle\Entity;

use FOS\UserBundle\Model\User as BaseUser;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;

/**
 * @ORM\Entity
 * @ORM\Table(name="fos_user")
 * @UniqueEntity("username",message="utilisateur.nom_utilisateur_existe") 
 * * @UniqueEntity("email",message="utilisateur.email_existe") 
 */
class Utilisateurs extends BaseUser {

    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * @var string
     * @Assert\Regex(pattern="/^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])[\da-zA-Z_@\*\-\.;,!\$\#]{6,}$/",

     *     match=true,

     *     message="mot_passe_invalide")

     */
    protected $plainPassword;

    /**
     * @var string
     *
     * @ORM\Column(name="nom", type="string", length=100,nullable=true)
     * @Assert\NotBlank(message="champ_requis")	
     */
    private $nom;

    /**
     * @ORM\Column(type="string", length=255,nullable=true)
     */
    protected $type;

    /**
     * @var string
     *
     * @ORM\Column(name="prenom", type="string", length=150,nullable=true)
     * @Assert\NotBlank(message="champ_requis")	 
     */
    private $prenom;

    /**
     * @var string
     *
     * @ORM\Column(name="genre", type="string", length=1,nullable=true)
     */
    private $genre;

    /**
     * @ORM\OneToMany(targetEntity="Message", mappedBy="destinataire",cascade={"remove"})
     */
    private $messages;

    /**
     * @var string
     *
     * @ORM\Column(name="cni", type="string", length=50,nullable=true)
     * * @Assert\Length(
     *      min = 1,
     *      max = 35,
     *      minMessage = "longueur_cni_invalide",
     *      maxMessage = "longueur_cni_invalide"
     * )
		
     */
    private $cni;

    /**
     * @var string
     * @ORM\Column(name="type_identification", type="string",length=50,nullable=true)
		
     */
    private $typeIdentification;

    /**
     * @var \date
     * @Assert\Date()
     * @Assert\LessThan("-18 years")	 
     * @ORM\Column(name="dateNaissance", type="date",nullable=true)
     */
    private $dateNaissance;

    /**
     * @var string    
     * @ORM\Column(name="lieuNaissance", type="string", length=150,nullable=true)
     */
    private $lieuNaissance;

    /**
     * @ORM\ManyToOne(targetEntity="BanquemondialeBundle\Entity\Pays")	
     */
    private $paysResidence;

    /**
     * @ORM\ManyToOne(targetEntity="BanquemondialeBundle\Entity\Region")	  		 
     */
    private $regionResidence;

    /**
     * @ORM\ManyToOne(targetEntity="BanquemondialeBundle\Entity\Departement")
     */
    private $departement;
    
    /**
     * @ORM\ManyToOne(targetEntity="BanquemondialeBundle\Entity\Prefecture")	 
     */
    private $prefecture;
    
    /**
     * @ORM\ManyToOne(targetEntity="BanquemondialeBundle\Entity\SousPrefectureCommune")	 
     */
    private $sousPrefecture;
    
    /**
     * @ORM\ManyToOne(targetEntity="UtilisateursBundle\Entity\Profile")	
     */
    private $profile;

    /**
     * @var string
     *
     * @ORM\Column(name="adresse", type="text",nullable=true)
     * 	 
     */
    private $adresse;
    /**
     * @var string
     * @ORM\Column(name="ville", type="string",length=100,nullable=true)
		
     */
    private $ville;

    /**
     * @var string
     *
     * @ORM\Column(name="telephone", type="string", length=20,nullable=true)
     * @Assert\Regex(pattern="/^(\(\+[0-9]{2,4}\))([0-9 ]{1,20})$/",

     *     match=true,

     *     message="telephone_invalide")
	 *
     * @Assert\NotBlank(message="champ_requis") 
     */
    private $telephone;

    /**
     * @ORM\ManyToOne(targetEntity="ParametrageBundle\Entity\Pole",inversedBy="utilisateur")
     * @ORM\JoinColumn(nullable=true)
     */
    private $pole;

    /**
     * @ORM\ManyToOne(targetEntity="BanquemondialeBundle\Entity\Entreprise",inversedBy="utilisateurs",cascade={"persist"})
     * @ORM\JoinColumn(nullable=true)
     */
    private $entreprise;

    /**
     * @ORM\OneToOne(targetEntity="BanquemondialeBundle\Entity\Particulier",inversedBy="utilisateur",cascade={"persist"})
     * @ORM\JoinColumn(nullable=true)
     */
    private $particulier;

    /**
     * @var \datetime
     *
     * @ORM\Column(name="dateCreation", type="date")
     */
    private $dateCreation;

    /**
     * @var bool
     *
     * @ORM\Column(name="is_first_log", type="boolean")
     */
    private $firstLog;

    /**
     * @ORM\OneToMany(targetEntity="DefaultBundle\Entity\Discussion",mappedBy="destinataire",cascade={"remove"})
     * @ORM\JoinColumn(nullable=true)
     */
    private $discussions;

    /**
     * @ORM\OneToMany(targetEntity="DefaultBundle\Entity\Discussion",mappedBy="expediteur",cascade={"remove"})
     * @ORM\JoinColumn(nullable=true)
     */
    private $discussionsInitiees;
    
    /**
     * @var \datetime
     *      
     * @ORM\Column(name="lastLogoutTime", type="date",nullable=true)
     */
    private $lastLogoutTime;

    public function __construct() {
        parent::__construct();

        $this->dateCreation = new \Datetime();

        $this->setFirstLog(true);
    }

    /**
     * Set nom
     *
     * @param string $nom
     * @return Utilisateurs
     */
    public function setNom($nom) {
        $this->nom = $nom;

        return $this;
    }

    /**
     * Get nom
     *
     * @return string 
     */
    public function getNom() {
        return $this->nom;
    }

    /**
     * Set prenom
     *
     * @param string $prenom
     * @return Utilisateurs
     */
    public function setPrenom($prenom) {
        $this->prenom = $prenom;

        return $this;
    }

    /**
     * Get prenom
     *
     * @return string 
     */
    public function getPrenom() {
        return $this->prenom;
    }

    /**
     * Set genre
     *
     * @param string $genre
     * @return Utilisateurs
     */
    public function setGenre($genre) {
        $this->genre = $genre;

        return $this;
    }

    /**
     * Get genre
     *
     * @return string 
     */
    public function getGenre() {
        return $this->genre;
    }

    /**
     * Set cni
     *
     * @param string $cni
     * @return Utilisateurs
     */
    public function setCni($cni) {
        $this->cni = $cni;

        return $this;
    }

    /**
     * Get cni
     *
     * @return string 
     */
    public function getCni() {
        return $this->cni;
    }

    /**
     * Set lieuNaissance
     *
     * @param string $lieuNaissance
     * @return Utilisateurs
     */
    public function setLieuNaissance($lieuNaissance) {
        $this->lieuNaissance = $lieuNaissance;

        return $this;
    }

    /**
     * Get lieuNaissance
     *
     * @return string 
     */
    public function getLieuNaissance() {
        return $this->lieuNaissance;
    }

    /**
     * Set adresse
     *
     * @param string $adresse
     * @return Utilisateurs
     */
    public function setAdresse($adresse) {
        $this->adresse = $adresse;

        return $this;
    }

    /**
     * Get adresse
     *
     * @return string 
     */
    public function getAdresse() {
        return $this->adresse;
    }

    /**
     * Set telephone
     *
     * @param string $telephone
     * @return Utilisateurs
     */
    public function setTelephone($telephone) {
        $this->telephone = $telephone;

        return $this;
    }

    /**
     * Get telephone
     *
     * @return string 
     */
    public function getTelephone() {
        return $this->telephone;
    }

    /**
     * Set dateCreation
     *
     * @param \DateTime $dateCreation
     * @return Utilisateurs
     */
    public function setDateCreation($dateCreation) {
        $this->dateCreation = $dateCreation;

        return $this;
    }

    /**
     * Get dateCreation
     *
     * @return \DateTime 
     */
    public function getDateCreation() {
        return $this->dateCreation;
    }

    /**
     * Set regionResidence
     *
     * @param \BanquemondialeBundle\Entity\Region $regionResidence
     * @return Utilisateurs
     */
    public function setRegionResidence(\BanquemondialeBundle\Entity\Region $regionResidence = null) {
        $this->regionResidence = $regionResidence;

        return $this;
    }

    /**
     * Get regionResidence
     *
     * @return \BanquemondialeBundle\Entity\Region 
     */
    public function getRegionResidence() {
        return $this->regionResidence;
    }

    /**
     * Set departement
     *
     * @param \BanquemondialeBundle\Entity\Departement $departement
     * @return Utilisateurs
     */
    public function setDepartement(\BanquemondialeBundle\Entity\Departement $departement = null) {
        $this->departement = $departement;

        return $this;
    }

    /**
     * Get departement
     *
     * @return \BanquemondialeBundle\Entity\Departement 
     */
    public function getDepartement() {
        return $this->departement;
    }

    /**
     * Set administration
     *
     * @param \BanquemondialeBundle\Entity\Administration $administration
     * @return Utilisateurs
     */
    public function setAdministration(\BanquemondialeBundle\Entity\Administration $administration = null) {
        $this->administration = $administration;

        return $this;
    }

    /**
     * Get administration
     *
     * @return \BanquemondialeBundle\Entity\Administration 
     */
    public function getAdministration() {
        return $this->administration;
    }

    /**
     * Set entreprise
     *
     * @param \BanquemondialeBundle\Entity\Entreprise $entreprise
     * @return Utilisateurs
     */
    public function setEntreprise(\BanquemondialeBundle\Entity\Entreprise $entreprise = null) {
        $this->entreprise = $entreprise;

        return $this;
    }

    /**
     * Get entreprise
     *
     * @return \BanquemondialeBundle\Entity\Entreprise 
     */
    public function getEntreprise() {
        return $this->entreprise;
    }

    /**
     * Set particulier
     *
     * @param \BanquemondialeBundle\Entity\Particulier $particulier
     * @return Utilisateurs
     */
    public function setParticulier(\BanquemondialeBundle\Entity\Particulier $particulier = null) {
        $this->particulier = $particulier;

        return $this;
    }

    /**
     * Get particulier
     *
     * @return \BanquemondialeBundle\Entity\Particulier 
     */
    public function getParticulier() {
        return $this->particulier;
    }

    /**
     * Set type
     *
     * @param string $type
     * @return Utilisateurs
     */
    public function setType($type) {
        $this->type = $type;

        return $this;
    }

    /**
     * Get type
     *
     * @return string 
     */
    public function getType() {
        return $this->type;
    }

    /**
     * Set paysResidence
     *
     * @param \BanquemondialeBundle\Entity\Pays $paysResidence
     * @return Utilisateurs
     */
    public function setPaysResidence(\BanquemondialeBundle\Entity\Pays $paysResidence = null) {
        $this->paysResidence = $paysResidence;

        return $this;
    }

    /**
     * Get paysResidence
     *
     * @return \BanquemondialeBundle\Entity\Pays 
     */
    public function getPaysResidence() {
        return $this->paysResidence;
    }

    /**
     * Set profile
     *
     * @param \UtilisateursBundle\Entity\Profile $profile
     * @return Utilisateurs
     */
    public function setProfile(\UtilisateursBundle\Entity\Profile $profile = null) {
        $this->profile = $profile;

        return $this;
    }

    /**
     * Get profile
     *
     * @return \UtilisateursBundle\Entity\Profile 
     */
    public function getProfile() {
        return $this->profile;
    }

    /**
     * Set firstLog
     *
     * @param boolean $firstLog
     * @return Utilisateurs
     */
    public function setFirstLog($firstLog) {
        $this->firstLog = $firstLog;

        return $this;
    }

    /**
     * Get firstLog
     *
     * @return boolean 
     */
    public function getFirstLog() {
        return $this->firstLog;
    }

    /**
     * Set pole
     *
     * @param \ParametrageBundle\Entity\Pole $pole
     * @return Utilisateurs
     */
    public function setPole(\ParametrageBundle\Entity\Pole $pole = null) {
        $this->pole = $pole;

        return $this;
    }

    /**
     * Get pole
     *
     * @return \ParametrageBundle\Entity\Pole 
     */
    public function getPole() {
        return $this->pole;
    }

    /**
     * Set dateNaissance
     *
     * @param \DateTime $dateNaissance
     * @return Utilisateurs
     */
    public function setDateNaissance($dateNaissance) {
        $this->dateNaissance = $dateNaissance;

        return $this;
    }

    /**
     * Get dateNaissance
     *
     * @return \DateTime 
     */
    public function getDateNaissance() {
        return $this->dateNaissance;
    }

    /**
     * Add messages
     *
     * @param \UtilisateursBundle\Entity\Message $messages
     * @return Utilisateurs
     */
    public function addMessage(\UtilisateursBundle\Entity\Message $messages) {
        $this->messages[] = $messages;

        return $this;
    }

    /**
     * Remove messages
     *
     * @param \UtilisateursBundle\Entity\Message $messages
     */
    public function removeMessage(\UtilisateursBundle\Entity\Message $messages) {
        $this->messages->removeElement($messages);
    }

    /**
     * Get messages
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getMessages() {
        return $this->messages;
    }

    /**
     * Get messages
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getMessagesNonLus() {
        $messages = array();
        foreach ($this->messages as $message) {
            if ($message->getIsRead() == false)
                $messages [] = $message;
        }
        return $messages;
    }

    /**
     * Set typeIdentification
     *
     * @param string $typeIdentification
     * @return Utilisateurs
     */
    public function setTypeIdentification($typeIdentification) {
        $this->typeIdentification = $typeIdentification;

        return $this;
    }

    /**
     * Get typeIdentification
     *
     * @return string 
     */
    public function getTypeIdentification() {
        return $this->typeIdentification;
    }

    /**
     * Add discussions
     *
     * @param \DefaultBundle\Entity\Discussion $discussions
     * @return Utilisateurs
     */
    public function addDiscussion(\DefaultBundle\Entity\Discussion $discussions) {
        $this->discussions[] = $discussions;

        return $this;
    }

    /**
     * Remove discussions
     *
     * @param \DefaultBundle\Entity\Discussion $discussions
     */
    public function removeDiscussion(\DefaultBundle\Entity\Discussion $discussions) {
        $this->discussions->removeElement($discussions);
    }

    /**
     * Get discussions
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getDiscussions() {
        return $this->discussions;
    }

    /**
     * Add discussionsInitiees
     *
     * @param \DefaultBundle\Entity\Discussion $discussionsInitiees
     * @return Utilisateurs
     */
    public function addDiscussionsInitiee(\DefaultBundle\Entity\Discussion $discussionsInitiees) {
        $this->discussionsInitiees[] = $discussionsInitiees;

        return $this;
    }

    /**
     * Remove discussionsInitiees
     *
     * @param \DefaultBundle\Entity\Discussion $discussionsInitiees
     */
    public function removeDiscussionsInitiee(\DefaultBundle\Entity\Discussion $discussionsInitiees) {
        $this->discussionsInitiees->removeElement($discussionsInitiees);
    }

    /**
     * Get discussionsInitiees
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getDiscussionsInitiees() {
        return $this->discussionsInitiees;
    }

     public function getMesDiscussions() {
        $discussions = array();
        foreach ($this->discussions as $discussion) {
            $discussions[] = $discussion;
                
        }
        foreach ($this->discussionsInitiees as $discussion) {
                          $discussions[] = $discussion;
                
        }
        return $discussions;
    }
    public function getEmailNonLus() {
        $messages = array();
        foreach ($this->getMesDiscussions() as $discussion) {
            $message = $discussion->getMessagesNonLus();
            if ($message and $message->getAuteur() != $this)
                $messages[] = $message;
        }



        return $messages;
    }
    public function getDiscussionsNonBloquer() {
        $discussions = array();
        foreach ($this->getMesDiscussions() as $discussion) {

            if (($discussion->getIsLocked() == false or $discussion->getLockedBy() != $this))
                $discussions[] = $discussion;
        }
        return $discussions;
    }
    
     public function getEmailsEnvoyesNonBloquer() {
        $messages = array();
        foreach ($this->getEmailsEnvoyes() as $message) {
                  if (($message->getIsLocked() == false))
                    $messages[] = $message;
        }
        return $messages;
    }

    /**
     * Get messageEnvoyes
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getEmailsEnvoyes() {
        $messages = array();
        foreach ($this->discussionsInitiees as $discussion) {
                foreach ($discussion->getMessages() as $message) {
                    if ($message->getAuteur() == $this)
                            $messages[] = $message;
                       
                }
        }
        foreach ($this->discussions as $discussion) {
                foreach ($discussion->getMessages() as $message) {
                    if ($message->getAuteur() == $this)
                            $messages[] = $message;
                        
                }
        }
        return $messages;
    }


    /**
     * Set prefecture
     *
     * @param \BanquemondialeBundle\Entity\Prefecture $prefecture
     * @return Utilisateurs
     */
    public function setPrefecture(\BanquemondialeBundle\Entity\Prefecture $prefecture = null)
    {
        $this->prefecture = $prefecture;

        return $this;
    }

    /**
     * Get prefecture
     *
     * @return \BanquemondialeBundle\Entity\Prefecture 
     */
    public function getPrefecture()
    {
        return $this->prefecture;
    }

    /**
     * Set sousPrefecture
     *
     * @param \BanquemondialeBundle\Entity\SousPrefectureCommune $sousPrefecture
     * @return Utilisateurs
     */
    public function setSousPrefecture(\BanquemondialeBundle\Entity\SousPrefectureCommune $sousPrefecture = null)
    {
        $this->sousPrefecture = $sousPrefecture;

        return $this;
    }

    /**
     * Get sousPrefecture
     *
     * @return \BanquemondialeBundle\Entity\SousPrefectureCommune 
     */
    public function getSousPrefecture()
    {
        return $this->sousPrefecture;
    }

    /**
     * Set ville
     *
     * @param string $ville
     * @return Utilisateurs
     */
    public function setVille($ville)
    {
        $this->ville = $ville;

        return $this;
    }

    /**
     * Get ville
     *
     * @return string 
     */
    public function getVille()
    {
        return $this->ville;
    }
}
