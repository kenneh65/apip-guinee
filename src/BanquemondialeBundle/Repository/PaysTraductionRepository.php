<?php

namespace BanquemondialeBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * PaysTraductionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PaysTraductionRepository extends EntityRepository {

    public function getListPaysByLanque($idLangue) {
        $query = $this->createQueryBuilder('p')->join('p.langue', 'l');
        $query->where('l.id = :idl')->setParameter('idl', $idLangue)->orderBy('p.libelle','asc')
        ;
        return $query;
    }
    public function getListPaysResidenceByLanque($idLangue) {
        $query = $this->createQueryBuilder('pt')
                ->join('pt.pays', 'p')              
                ->join('pt.langue', 'l')->where('p.residence=true')->andWhere('l.id = :idl')->orderBy('pt.libelle','asc');
        $query->setParameter('idl', $idLangue);
        return $query;
    }

    public function getPaysTraduction($id, $idLangue) {
        $qb = $this->createQueryBuilder('t');


        $qb->where('t.pays = :idPays and t.langue = :idLangue')->orderBy('t.libelle','asc')
                ->setParameter('idPays', $id)
                ->setParameter('idLangue', $idLangue)
        ;
     
        return $qb->getQuery()->getOneOrNullResult();
    }
     public function getTraduction($id, $langue) {
        $qb = $this->createQueryBuilder('t')
                ->join('t.langue','l');


        $qb->where('t.pays = :idPays and l.code = :langue')->orderBy('t.libelle','asc')
                ->setParameter('idPays', $id)
                ->setParameter('langue', $langue)
        ;
     
        return $qb->getQuery()->getOneOrNullResult();
    }
    public function getListPays($langue){        
        $query=$this->createQueryBuilder('p')->join('p.langue', 'l');
        $query->where('l.code = :code')->setParameter('code', $langue)->orderBy('l.libelle','asc');
        return $query;
    }
    public function getPaysResidenceByCodeLanque($codeLangue) {
        $query = $this->createQueryBuilder('pt')
                ->join('pt.pays', 'p')              
                ->join('pt.langue', 'l')->where('p.residence=true')->andWhere('l.code = :code')->orderBy('pt.libelle','asc');
        $query->setParameter('code', $codeLangue);
        return $query;
    }
	
	public function getListPaysAndTraduction($idLangue) {
        $query = $this->createQueryBuilder('pt')
		->select('pt,p')
		->join('pt.langue', 'l')
		->join('pt.pays','p');
        $query->where('l.id = :idl')->setParameter('idl', $idLangue)->orderBy('pt.libelle','asc');

        return $query->getQuery()->getResult();
    }

}
