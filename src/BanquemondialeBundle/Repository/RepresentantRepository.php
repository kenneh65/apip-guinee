<?php

namespace BanquemondialeBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * RepresentantRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RepresentantRepository extends EntityRepository {

    public function getListRepresentant() {
        $query = $this->em->createQuery('SELECT r FROM BanquemondialeBundle:Representant r, UtilisateursBundle:Utilisateurs u WHERE u.pole=p');

        $query->orderBy('a.id', 'desc');
        $results = $query->getQuery()->getResult();
        //die(dump($results[1]));
        $tabResult = array();
        $i = 0;
        foreach ($results as $result) {
            $tabResult[$i]['denominationSociale'] = $result->getDossierDemande()->getDenominationSociale();
            $tabResult[$i]['nomCommercial'] = $result->getDossierDemande()->getNomCommercial();
            $tabResult[$i]['enseigne'] = $result->getDossierDemande()->getEnseigne();
            $tabResult[$i]['telephone'] = $result->getDossierDemande()->getTelephone();
            $tabResult[$i]['email'] = $result->getDossierDemande()->getEmail();
            //$tabResult[$i]['fax'] = $result->getDossierDemande()->getFax();
            $tabResult[$i]['region'] = $result->getDossierDemande()->getRegion();
            $tabResult[$i]['dateCreation'] = $result->getDossierDemande()->getDateCreation();

            $tabResult[$i]['id'] = $result->getDossierDemande()->getId();

            $formJ = $result->getDossierDemande()->getFormeJuridique();
            $idf = $formJ->getId();
            $tabResult[$i]['idFormeJ'] = $idf;
            $formJTrad = $this->getEntityManager()->getRepository('BanquemondialeBundle:FormeJuridiqueTraduction')->getLibelleFormeJuridiqueByLanque($idLangue, $idf);
            ($formJTrad) ? $tabResult[$i]['libelleFormeJ'] = $formJTrad->getLibelle() : $tabResult[$i]['libelleFormeJ'] = "";
            $idTyp = $result->getDossierDemande()->getTypeOperation()->getId();
            $tabResult[$i]['idTypeOp'] = $idTyp;
            $typeOpTrad = $this->getEntityManager()->getRepository('BanquemondialeBundle:TypeOperationTraduction')->getLibelleOperationByLanque($idLangue, $idTyp);
            ($typeOpTrad) ? $tabResult[$i]['libelleTypeOp'] = $typeOpTrad->getLibelle() : $tabResult[$i]['libelleTypeOp'] = "";

            $statutTraitement = $result->getStatutTraitement();
            $tabResult[$i]['idStatutTraitement'] = $statutTraitement->getId();
            $statutTraitementTraduction = $this->getEntityManager()->getRepository('BanquemondialeBundle:StatutTraitementTraduction')->getLibelleStatutTraitementByLangue($idLangue, $statutTraitement);
            ($statutTraitementTraduction) ? $tabResult[$i]['libelleStatutTraitement'] = $statutTraitementTraduction->getLibelle() : $tabResult[$i]['libelleStatutTraitement'] = "";

            $i++;
        }
        //die(dump($results[1]));

        return $tabResult;
    }

    public function getRepresentantByDossierDemande($idd, $idLangue) {
        $qb = $this->createQueryBuilder('r')
                        ->leftJoin('r.dossierDemande', 'd')
                        ->where('d.id = :idd')->setParameters(array('idd' => $idd))->setMaxResults(3);
        $query = $qb->getQuery();
        $results = $query->getResult();
        $tabResult = array();
        $i = 0;
        foreach ($results as $result) {
            $fonction = $result->getFonction();
            $pays = $result->getPays();
            $tabResult[$i]['id'] = $result->getId();
            $tabResult[$i]['nom'] = $result->getNom();
            $tabResult[$i]['prenom'] = $result->getPrenom();
            $tabResult[$i]['dateDeNaissance'] = $result->getDateDeNaissance();
            $tabResult[$i]['LieuNaissance'] = $result->getLieuNaissance();
            $tabResult[$i]['adresse'] = $result->getAdresse();
            $tabResult[$i]['email'] = $result->getEmail();
            $tabResult[$i]['telephone'] = $result->getTelephone();
            $tabResult[$i]['portable'] = $result->getPortable();
            $tabResult[$i]['ville'] = $result->getVille();
            $tabResult[$i]['quartier'] = $result->getQuartier();
            $tabResult[$i]['civilite'] = $result->getCivilite();
            $tabResult[$i]['typeIdentification']=$result->getTypeIdentification();
            $tabResult[$i]['numeroIdentiteNational'] = $result->getNumeroIdentiteNational();
            $situation = $result->getSituationMatrimoniale();
            $genre = $result->getGenre();
            
            
            $tabResult[$i]['nationalite'] = "";
            if ($pays) {
                $paysTrad = $this->getEntityManager()->getRepository('BanquemondialeBundle:PaysTraduction')->findOneBy(array('pays' => $pays->getid(), 'langue' => $idLangue));
                ($paysTrad) ? $tabResult[$i]['nationalite'] = $paysTrad->getNationalite() : $tabResult[$i]['nationalite'] = "";
            }
            $tabResult[$i]['situationMatrimoniale'] = "";
            if ($situation) {
                $situationTrad = $this->getEntityManager()->getRepository('BanquemondialeBundle:SituationMatrimonialeTraduction')->findOneBy(array('situationMatrimoniale' => $situation->getid(), 'langue' => $idLangue));
                ($situationTrad) ? $tabResult[$i]['situationMatrimoniale'] = $situationTrad->getLibelle() : $tabResult[$i]['situationMatrimoniale'] = "";
            }
            $tabResult[$i]['genre'] = "";
            if ($genre) {
                $genreTrad = $this->getEntityManager()->getRepository('BanquemondialeBundle:GenreTraduction')->findOneBy(array('genre' => $genre->getid(), 'langue' => $idLangue));
                ($genreTrad) ? $tabResult[$i]['genre'] = $genreTrad->getLibelle() : $tabResult[$i]['genre'] = "";
            }
			$tabResult[$i]['libelleFonction'] = "";
			if ($fonction) {
                $fctTrad = $this->getEntityManager()->getRepository('BanquemondialeBundle:FonctionTraduction')->findOneBy(array('fonction' => $fonction->getid(), 'langue' => $idLangue));
                
				if($fctTrad && $genre)
				{
					if($genre->getCode()=='F')
					{
						$tabResult[$i]['libelleFonction'] = $fctTrad->getLibelleFeminin();
					}
					else
					{
						$tabResult[$i]['libelleFonction'] = $fctTrad->getLibelle();
					}
				}
				//($fctTrad) ? $tabResult[$i]['libelleFonction'] = $fctTrad->getLibelle() : $tabResult[$i]['libelleFonction'] = "";
            }
            $tabResult[$i]['codeSituationMatrimoniale'] = "";
            if ($result->getSituationMatrimoniale()) {
                $tabResult[$i]['codeSituationMatrimoniale'] = $result->getSituationMatrimoniale()->getCode();
            }
            $tabResult[$i]['codeCivilite'] = "";
            $civilite = $result->getCivilite();
            if ($civilite) {
                $codeCivilite = $this->getEntityManager()->getRepository('BanquemondialeBundle:Civilite')->find($civilite);
                ($codeCivilite) ? $tabResult[$i]['codeCivilite'] = $codeCivilite->getCode() : $tabResult[$i]['codeCivilite'] = "";
            }
            $i++;
        }
        return $tabResult;
    }

    public function findListeRepresentantByDossierDemande($idd, $idLangue) {
        $qb = $this->createQueryBuilder('r')
                ->leftJoin('r.genre', 'g')
				->leftJoin('r.fonction', 'f')
                ->where('r.dossierDemande = :idd')
                ->setParameters(array('idd' => $idd));
        $qb->orderBy('r.id', 'asc');
        $query = $qb->getQuery();
        $results = $query->getResult();


        $tabResult = array();
        $i = 0;
        foreach ($results as $result) {
            $fonction = $result->getFonction();
            $pays = $result->getPays();
            $tabResult[$i]['id'] = $result->getId();
            $tabResult[$i]['nom'] = $result->getNom();
            $tabResult[$i]['prenom'] = $result->getPrenom();
            $tabResult[$i]['dateDeNaissance'] = $result->getDateDeNaissance();
            $tabResult[$i]['LieuNaissance'] = $result->getLieuNaissance();
            $tabResult[$i]['adresse'] = $result->getAdresse();
            $tabResult[$i]['email'] = $result->getEmail();
            $tabResult[$i]['telephone'] = $result->getTelephone();
            $tabResult[$i]['ville'] = $result->getVille();
            $tabResult[$i]['quartier'] = $result->getQuartier();
            $situation = $result->getSituationMatrimoniale();
            $tabResult[$i]['genre'] = null;
			$tabResult[$i]['fonction'] = null;
            $genre = $result->getGenre();
            if ($genre) {
                $genreTraduction = $this->getEntityManager()->getRepository('BanquemondialeBundle:GenreTraduction')->findOneBy(array('genre' => $genre, 'langue' => $idLangue));
                ($genreTraduction) ? $tabResult[$i]['genre'] = $genreTraduction->getLibelle() : $tabResult[$i]['genre'] = "";
            }
			
			$fonction = $result->getFonction();
            if ($fonction) {
                $fonctionTraduction = $this->getEntityManager()->getRepository('BanquemondialeBundle:FonctionTraduction')->findOneBy(array('fonction' => $fonction, 'langue' => $idLangue));
                ($fonctionTraduction) ? $tabResult[$i]['fonction'] = $fonctionTraduction->getLibelle() : $tabResult[$i]['fonction'] = "";
            }

            $i++;
        }
        //die(dump($tabResult));
        return $tabResult;
    }

    //->leftJoin('BanquemondialeBundle:GenreTraduction', 'gt', 'WITH', 'gt.genre = g.id')
}
