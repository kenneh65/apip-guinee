<?php

namespace BanquemondialeBundle\Repository;

use Doctrine\ORM\EntityRepository;
use \DateTime;

/**
 * DossierDemandeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DossierDemandeRepository extends EntityRepository
{

    public function recherche($chaine)
    {
        $db = $this->createQueryBuilder('a')
            ->select('a,b,c,d,e,f,g')
            ->join('a.formejuridique', 'b')
            ->join('a.typeoperation', 'c')
            ->join('a.nom', 'd')
            ->join('a.region', 'e')
            ->join('a.departement', 'f')
            ->join('a.pays', 'g')
            ->where('g.code like :chaine17 OR f.departement like :chaine16 OR e.region like :chaine15 OR d.nom like :chaine14 OR c.typeoperation like :chaine13 OR b.formejuridique like :chaine12 OR a.nomCommercial like :chaine OR a.denominationSociale like :chaine1 OR a.activiteSociale like :chaine2 OR a.sigle like :chaine3 OR a.enseigne like :chaine4 OR a.adresseSiege like :chaine5 OR a.boitePostale like :chaine6 OR a.telephone like :chaine7 OR a.email like :chaine8 ')
            ->orderBy('a.id')
            ->setParameters(array('chaine17' => '%' . $chaine . '%', 'chaine16' => '%' . $chaine . '%', 'chaine15' => '%' . $chaine . '%', 'chaine14' => '%' . $chaine . '%', 'chaine13' => '%' . $chaine . '%', 'chaine12' => '%' . $chaine . '%', 'chaine' => '%' . $chaine . '%', 'chaine1' => '%' . $chaine . '%', 'chaine2' => '%' . $chaine . '%', 'chaine3' => '%' . $chaine . '%', 'chaine4' => '%' . $chaine . '%', 'chaine5' => '%' . $chaine . '%', 'chaine6' => '%' . $chaine . '%', 'chaine7' => '%' . $chaine . '%', 'chaine8' => '%' . $chaine . '%'));

        return $db->getQuery()->getResult();
    }

    public function rechercheByCriteres($chaine, $chaine1)
    {
        $db = $this->createQueryBuilder('a')
            ->where('a.nomCommercial like :chaine')
            ->andWhere('a.denominationSociale like :chaine1')
            ->setParameters(array('chaine' => '%' . $chaine . '%', 'chaine1' => '%' . $chaine1 . '%'));
        return $db->getQuery()->getResult();
    }

    public function findDemandeDossierByParametres($data, $idLangue, $idUser = null, $limit = null)
    {
//
//        $query = $this->createQueryBuilder('a')
//            ->leftJoin('a.utilisateur', 'u')->where('a.statut is null')->andWhere('u.id=:idu')
        $query = $this->_em->createQueryBuilder('a');
        $query
            ->select('a')
            ->from('BanquemondialeBundle:dossierdemande', 'a')
            ->innerJoin('UtilisateursBundle:Utilisateurs', 'u')
            ->where('a.utilisateur=u.id')
            ->andWhere('a.statut is NULL AND a.utilisateur=:idu')
            ->orderBy('a.dateCreation', 'desc')
            ->setParameter('idu', $idUser);
        //  die(dump(($data['id'])));
        // if (!empty($data)){
        if ($data['id'] != '') {
            $query->andWhere('LOWER(a.id) = :id')
                ->setParameter('id', $data['id']);
        }
        if ($data['denominationSociale'] != '') {
            $query->andWhere('LOWER(a.denominationSociale) like :denominationSociale')
                ->setParameter('denominationSociale', '%' . $data['denominationSociale'] . '%');
        }
        if ($data && array_key_exists('nomCommercial', $data) && $data['nomCommercial'] != '') {
            $query->andWhere('LOWER(a.nomCommercial) like :nomCommercial')
                ->setParameter('nomCommercial', '%' . $data['nomCommercial'] . '%');
        }
        /*
          if($data['dateCreation'] != '')
          {
          $query->andWhere('DATE_DIFF(a.dateCreation,:dateCreation)=0')
          ->setParameter('dateCreation', $data['dateCreation']);
          } */
        if ($data['dateCreationDebut'] != '') {
            $query->andWhere('DATE_DIFF(a.dateCreation,:dateCreationDebut)>=0')
                ->setParameter('dateCreationDebut', new DateTime($data['dateCreationDebut']));
        }

        if ($data['dateCreationFin'] != '') {
            $query->andWhere('DATE_DIFF(a.dateCreation,:dateCreationFin)<=0')
                ->setParameter('dateCreationFin', new DateTime($data['dateCreationFin']));
        }

        if ($data['formeJuridique'] != '') {
            $query->andWhere('a.formeJuridique = :formeJuridique')
                ->setParameter('formeJuridique', $data['formeJuridique']);
        }
        //  }
        //  die(dump($query));
//        if ($data['typeOperation'] != '') {
//            $query->andWhere('a.typeOperation = :typeOperation')
//                    ->setParameter('typeOperation', $data['typeOperation']);
//        }
        if ($limit) {
            $query->setMaxResults($limit);
        }
        $results = $query->getQuery()->getResult();

        $tabResult = array();
        $i = 0;
        foreach ($results as $result) {
            $tabResult[$i]['id'] = $result->getId();
            $formJ = $result->getFormeJuridique();
            $idf = $formJ->getId();
            $tabResult[$i]['idFormeJ'] = $idf;
            $formJTrad = $this->getEntityManager()->getRepository('BanquemondialeBundle:FormeJuridiqueTraduction')->getLibelleFormeJuridiqueByLanque($idLangue, $idf);
            ($formJTrad) ? $tabResult[$i]['libelleFormeJ'] = $formJTrad->getLibelle() : $tabResult[$i]['libelleFormeJ'] = "";

            $idTyp = $result->getTypeOperation()->getId();
            $tabResult[$i]['idTypeOp'] = $idTyp;
            $typeOpTrad = $this->getEntityManager()->getRepository('BanquemondialeBundle:TypeOperationTraduction')->getLibelleOperationByLanque($idLangue, $idTyp);
            ($typeOpTrad) ? $tabResult[$i]['libelleTypeOp'] = $typeOpTrad->getLibelle() : $tabResult[$i]['libelleTypeOp'] = "";


            $tabResult[$i]['denominationSociale'] = $result->getDenominationSociale();
            $tabResult[$i]['nomCommercial'] = $result->getnomCommercial();
            $tabResult[$i]['enseigne'] = $result->getEnseigne();
            $tabResult[$i]['telephone'] = $result->getTelephone();
            $tabResult[$i]['email'] = $result->getEmail();
            //$tabResult[$i]['fax'] = $result->getFax();
            $tabResult[$i]['region'] = $result->getRegion();
            $tabResult[$i]['dateCreation'] = $result->getDateCreation();
            $i++;
        }
        //die(var_dump($tabResult));
        return $tabResult;
    }

    public function findDemandeDiasporaByParametres($data, $idLangue, $limit = null)
    {
        $query = $this->createQueryBuilder('a')->join('a.typeDossier', 'tp')->join('tp.pole', 'p')
            ->where('a.statut=1 ')->andWhere('p.sigle=:sgle or p.sigle=:sgle2')
            ->setParameters(array('sgle' => 'DP', 'sgle2' => 'INV'));
        if ($data['id'] != '') {
            $query->andWhere('LOWER(a.id) = :id')
                ->setParameter('id', $data['id']);
        }

        if ($data['denominationSociale'] != '') {
            $query->andWhere('LOWER(a.denominationSociale) like :denominationSociale')
                ->setParameter('denominationSociale', '%' . $data['denominationSociale'] . '%');
        }

        if ($data && array_key_exists('nomCommercial', $data) && $data['nomCommercial'] != '') {
            $query->andWhere('LOWER(a.nomCommercial) like :nomCommercial')
                ->setParameter('nomCommercial', '%' . $data['nomCommercial'] . '%');
        }

        if ($data['dateCreationDebut'] != '') {
            $query->andWhere('DATE_DIFF(a.dateCreation,:dateCreationDebut)>=0')
                ->setParameter('dateCreationDebut', new DateTime($data['dateCreationDebut']));
        }

        if ($data['dateCreationFin'] != '') {
            $query->andWhere('DATE_DIFF(a.dateCreation,:dateCreationFin)<=0')
                ->setParameter('dateCreationFin', new DateTime($data['dateCreationFin']));
        }

        if ($data['formeJuridique'] != '') {
            $query->andWhere('a.formeJuridique = :formeJuridique')
                ->setParameter('formeJuridique', $data['formeJuridique']);
        }


        if ($limit) {
            $query->setMaxResults($limit);
        }
        $results = $query->getQuery()->getResult();

        $tabResult = array();
        $i = 0;
        foreach ($results as $result) {
            $tabResult[$i]['id'] = $result->getId();
            $formJ = $result->getFormeJuridique();
            $idf = $formJ->getId();
            $tabResult[$i]['idFormeJ'] = $idf;
            $formJTrad = $this->getEntityManager()->getRepository('BanquemondialeBundle:FormeJuridiqueTraduction')->getLibelleFormeJuridiqueByLanque($idLangue, $idf);
            ($formJTrad) ? $tabResult[$i]['libelleFormeJ'] = $formJTrad->getLibelle() : $tabResult[$i]['libelleFormeJ'] = "";

            $idTyp = $result->getTypeOperation()->getId();
            $tabResult[$i]['idTypeOp'] = $idTyp;
            $typeOpTrad = $this->getEntityManager()->getRepository('BanquemondialeBundle:TypeOperationTraduction')->getLibelleOperationByLanque($idLangue, $idTyp);
            ($typeOpTrad) ? $tabResult[$i]['libelleTypeOp'] = $typeOpTrad->getLibelle() : $tabResult[$i]['libelleTypeOp'] = "";


            $tabResult[$i]['denominationSociale'] = $result->getDenominationSociale();
            $tabResult[$i]['nomCommercial'] = $result->getnomCommercial();
            $tabResult[$i]['enseigne'] = $result->getEnseigne();
            $tabResult[$i]['telephone'] = $result->getTelephone();
            $tabResult[$i]['email'] = $result->getEmail();
            $tabResult[$i]['typeDossier'] = $result->getTypeDossier()->getLibelle();
            $tabResult[$i]['statutValidation'] = $result->getStatutValidation();
            $tabResult[$i]['region'] = $result->getRegion();
            $tabResult[$i]['dateCreation'] = $result->getDateCreation();
            $i++;
        }
        //die(var_dump($tabResult));
        return $tabResult;
    }

    public function findDemandeDossierDepotByParametres($data, $idLangue, $idUser = null, $limit = null, $statut = null)
    {
        $query = $this->createQueryBuilder('a')
            ->leftJoin('a.utilisateurDepot', 'u')
            ->where('a.statut =:statut')
            ->andWhere('u.id=:idu')
            ->orderBy('a.id', 'Desc')
            ->setParameter('idu', $idUser)
            ->setParameter('statut', $statut);
        if ($data['numeroDossier'] != '') {
            $query->andWhere('LOWER(a.numeroDossier) = :numeroDossier')
                ->setParameter('numeroDossier', $data['numeroDossier']);
        }

        if ($data['denominationSociale'] != '') {
            $query->andWhere('LOWER(a.denominationSociale) like :denominationSociale')
                ->setParameter('denominationSociale', '%' . $data['denominationSociale'] . '%');
        }
        /*
          if ($data['nomCommercial'] != '') {
          $query->andWhere('LOWER(a.nomCommercial) like :nomCommercial')
          ->setParameter('nomCommercial', '%' . $data['nomCommercial'] . '%');
          } */
        /* 	
          if($data['dateCreation'] != '')
          {
          $query->andWhere('DATE_DIFF(a.dateCreation,:dateCreation)=0')
          ->setParameter('dateCreation', $data['dateCreation']);
          } */

        if ($data['dateCreationDebut'] != '') {
            $query->andWhere('DATE_DIFF(a.dateCreation,:dateCreationDebut)>=0')
                ->setParameter('dateCreationDebut', new DateTime($data['dateCreationDebut']));
        }

        if ($data['dateCreationFin'] != '') {
            $query->andWhere('DATE_DIFF(a.dateCreation,:dateCreationFin)<=0')
                ->setParameter('dateCreationFin', new DateTime($data['dateCreationFin']));
        }

        if ($data['formeJuridique'] != '') {
            $query->andWhere('a.formeJuridique = :formeJuridique')
                ->setParameter('formeJuridique', $data['formeJuridique']);
        }

//        if ($data['typeOperation'] != '') {
//            $query->andWhere('a.typeOperation = :typeOperation')
//                    ->setParameter('typeOperation', $data['typeOperation']);
//        }

        if ($limit) {
            $query->setMaxResults($limit);
        }
        $results = $query->getQuery()->getResult();

        $tabResult = array();
        $i = 0;
        foreach ($results as $result) {
            $tabResult[$i]['id'] = $result->getId();
            $tabResult[$i]['numeroDossier'] = $result->getNumeroDossier();
            $formJ = $result->getFormeJuridique();
            $idf = $formJ->getId();
            $tabResult[$i]['idFormeJ'] = $idf;
            $formJTrad = $this->getEntityManager()->getRepository('BanquemondialeBundle:FormeJuridiqueTraduction')->getLibelleFormeJuridiqueByLanque($idLangue, $idf);
            ($formJTrad) ? $tabResult[$i]['libelleFormeJ'] = $formJTrad->getLibelle() : $tabResult[$i]['libelleFormeJ'] = "";

            $idTyp = $result->getTypeOperation()->getId();
            $tabResult[$i]['idTypeOp'] = $idTyp;
            $typeOpTrad = $this->getEntityManager()->getRepository('BanquemondialeBundle:TypeOperationTraduction')->getLibelleOperationByLanque($idLangue, $idTyp);
            ($typeOpTrad) ? $tabResult[$i]['libelleTypeOp'] = $typeOpTrad->getLibelle() : $tabResult[$i]['libelleTypeOp'] = "";

            $agentSaisi = $result->getUtilisateur();
            ($agentSaisi) ? $tabResult[$i]['affectation'] = $agentSaisi->getPrenom() . " " . $agentSaisi->getNom() : $tabResult[$i]['affectation'] = '';
            $tabResult[$i]['denominationSociale'] = $result->getDenominationSociale();
            $tabResult[$i]['nomCommercial'] = $result->getnomCommercial();
            $tabResult[$i]['enseigne'] = $result->getEnseigne();
            $tabResult[$i]['telephone'] = $result->getTelephone();
            $tabResult[$i]['email'] = $result->getEmail();
            //$tabResult[$i]['fax'] = $result->getFax();
            $tabResult[$i]['region'] = $result->getRegion();
            $tabResult[$i]['dateCreation'] = $result->getDateCreation();
            $tabResult[$i]['statut'] = $result->getStatut();
            $i++;
        }
        //die(var_dump($tabResult));
        return $tabResult;
    }

    public function findDemandeDossierDeposesByParametres($data, $idLangue, $idUser = null, $limit = null, $statut = null)
    {
        $query = $this->createQueryBuilder('a')
            ->leftJoin('a.utilisateurDepot', 'u')
            ->where('a.statut != -2 or a.statut is null')
            ->andWhere('u.id=:idu')
            ->orderBy('a.id', 'Desc')
            ->setParameter('idu', $idUser);
        if ( !empty($data['numeroDossier'])) {
            $query->andWhere('LOWER(a.numeroDossier) = :numeroDossier')
                ->setParameter('numeroDossier', $data['numeroDossier']);
        }
        if ( !empty($data['denominationSociale'])) {
            $query->andWhere('LOWER(a.denominationSociale) like :denominationSociale')
                ->setParameter('denominationSociale', '%' . $data['denominationSociale'] . '%');
        }
        if ( !empty($data['dateCreationDebut'])) {
            $query->andWhere('DATE_DIFF(a.dateCreation,:dateCreationDebut)>=0')
                ->setParameter('dateCreationDebut', new DateTime($data['dateCreationDebut']));
        }
        if (!empty($data['dateCreationFin'] )) {
            $query->andWhere('DATE_DIFF(a.dateCreation,:dateCreationFin)<=0')
                ->setParameter('dateCreationFin', new DateTime($data['dateCreationFin']));
        }
        if ( !empty($data['formeJuridique'])) {
            $query->andWhere('a.formeJuridique = :formeJuridique')
                ->setParameter('formeJuridique', $data['formeJuridique']);
        }
        if ($limit) {
            $query->setMaxResults($limit);
        }
        $results = $query->getQuery()->getResult();
        $tabResult = array();
        $i = 0;
        foreach ($results as $result) {
            $tabResult[$i]['id'] = $result->getId();
            $tabResult[$i]['numeroDossier'] = $result->getNumeroDossier();
            $formJ = $result->getFormeJuridique();
            $idf = $formJ->getId();
            $tabResult[$i]['idFormeJ'] = $idf;
            $formJTrad = $this->getEntityManager()->getRepository('BanquemondialeBundle:FormeJuridiqueTraduction')->getLibelleFormeJuridiqueByLanque($idLangue, $idf);
            ($formJTrad) ? $tabResult[$i]['libelleFormeJ'] = $formJTrad->getLibelle() : $tabResult[$i]['libelleFormeJ'] = "";

            $idTyp = $result->getTypeOperation()->getId();
            $tabResult[$i]['idTypeOp'] = $idTyp;
            $typeOpTrad = $this->getEntityManager()->getRepository('BanquemondialeBundle:TypeOperationTraduction')->getLibelleOperationByLanque($idLangue, $idTyp);
            ($typeOpTrad) ? $tabResult[$i]['libelleTypeOp'] = $typeOpTrad->getLibelle() : $tabResult[$i]['libelleTypeOp'] = "";

            $agentSaisi = $result->getUtilisateur();
            ($agentSaisi) ? $tabResult[$i]['affectation'] = $agentSaisi->getPrenom() . " " . $agentSaisi->getNom() : $tabResult[$i]['affectation'] = '';
            $tabResult[$i]['denominationSociale'] = $result->getDenominationSociale();
            $tabResult[$i]['nomCommercial'] = $result->getnomCommercial();
            $tabResult[$i]['enseigne'] = $result->getEnseigne();
            $tabResult[$i]['telephone'] = $result->getTelephone();
            $tabResult[$i]['email'] = $result->getEmail();
            //$tabResult[$i]['fax'] = $result->getFax();
            $tabResult[$i]['region'] = $result->getRegion();
            $tabResult[$i]['dateCreation'] = $result->getDateCreation();
            $tabResult[$i]['statut'] = $result->getStatut();
            $i++;
        }
        return $tabResult;
    }

    public function findDossierSuiviByParametres($data, $idLangue, $idUser, $limit = null, $notStatut = null)
    {
        $query = $this->createQueryBuilder('a')
            ->leftJoin('a.utilisateur', 'u')->where('a.statut is not null')->andWhere('u.id=:idu')
            ->setParameter('idu', $idUser);

        if ($data['numeroDossier'] != '') {
            $query->andWhere('LOWER(a.numeroDossier) = :numeroDossier')
                ->setParameter('numeroDossier', $data['numeroDossier']);
        }

        if ($data['denominationSociale'] != '') {
            $query->andWhere('LOWER(a.denominationSociale) like :denominationSociale')
                ->setParameter('denominationSociale', '%' . $data['denominationSociale'] . '%');
        }
        /*
          if ($data['nomCommercial'] != '') {
          $query->andWhere('LOWER(a.nomCommercial) like :nomCommercial')
          ->setParameter('nomCommercial', '%' . $data['nomCommercial'] . '%');
          } */
        /* 	
          if($data['dateCreation'] != '')
          {
          $query->andWhere('DATE_DIFF(a.dateCreation,:dateCreation)=0')
          ->setParameter('dateCreation', $data['dateCreation']);
          } */

        if ($data['statut'] != '') {
            $query->andWhere('a.statut = :stut')
                ->setParameter('stut', $data['statut']);
        }

        if ($notStatut) {
            $query->andWhere('a.statut != :st')
                ->setParameter('st', $notStatut);
        }

        if ($data['dateCreationDebut'] != '') {
            $query->andWhere('DATE_DIFF(a.dateCreation,:dateCreationDebut)>=0')
                ->setParameter('dateCreationDebut', new DateTime($data['dateCreationDebut']));
        }
        if ($data['dateCreationFin'] != '') {
            $query->andWhere('DATE_DIFF(a.dateCreation,:dateCreationFin)<=0')
                ->setParameter('dateCreationFin', new DateTime($data['dateCreationFin']));
        }
        if ($data['dateDelivranceDebut'] != '') {
            $query->andWhere('DATE_DIFF(a.dateDelivrance,:dateDelivranceDebut)>=0')
                ->setParameter('dateDelivranceDebut', new DateTime($data['dateDelivranceDebut']));
        }
        if ($data['dateDelivranceFin'] != '') {
            $query->andWhere('DATE_DIFF(a.dateDelivrance,:dateDelivranceFin)<=0')
                ->setParameter('dateDelivranceFin', new DateTime($data['dateDelivranceFin']));
        }
        if ($data['formeJuridique'] != '') {
            $query->andWhere('a.formeJuridique = :formeJuridique')
                ->setParameter('formeJuridique', $data['formeJuridique']);
        }

        if ($limit) {
            $query->setMaxResults($limit);
        }
        $query->orderBy('a.id', 'desc');
        $results = $query->getQuery()->getResult();
        $tabResult = array();
        $i = 0;
        foreach ($results as $result) {
            $tabResult[$i]['id'] = $result->getId();
            $formJ = $result->getFormeJuridique();
            $idf = $formJ->getId();
            $tabResult[$i]['idFormeJ'] = $idf;
            $formJTrad = $this->getEntityManager()->getRepository('BanquemondialeBundle:FormeJuridiqueTraduction')->getLibelleFormeJuridiqueByLanque($idLangue, $idf);
            ($formJTrad) ? $tabResult[$i]['libelleFormeJ'] = $formJTrad->getLibelle() : $tabResult[$i]['libelleFormeJ'] = "";
            $idTyp = $result->getTypeOperation()->getId();
            $tabResult[$i]['idTypeOp'] = $idTyp;
            $typeOpTrad = $this->getEntityManager()->getRepository('BanquemondialeBundle:TypeOperationTraduction')->getLibelleOperationByLanque($idLangue, $idTyp);
            ($typeOpTrad) ? $tabResult[$i]['libelleTypeOp'] = $typeOpTrad->getLibelle() : $tabResult[$i]['libelleTypeOp'] = "";

            $tabResult[$i]['numeroDossier'] = $result->getNumeroDossier();
            $tabResult[$i]['denominationSociale'] = $result->getDenominationSociale();
            $tabResult[$i]['nomCommercial'] = $result->getnomCommercial();
            $tabResult[$i]['enseigne'] = $result->getEnseigne();
            $tabResult[$i]['telephone'] = $result->getTelephone();
            $tabResult[$i]['email'] = $result->getEmail();
            //$tabResult[$i]['fax'] = $result->getFax();
            $tabResult[$i]['region'] = $result->getRegion();
            $tabResult[$i]['dateCreation'] = $result->getDateCreation();
            $tabResult[$i]['dateDelivrance'] = $result->getDateDelivrance();
            $tabResult[$i]['statut'] = $result->getStatut();
            $tabResult[$i]['orange'] = $result->isOrangeCreateur();
            $tabResult[$i]['red'] = $result->isRedCreateur();
            $i++;
        }
        //die(var_dump($tabResult));
        return $tabResult;
    }

    public function findStatistiqueDossierSaisieBy($data,$user)
    {
        $denominationSociale=" ";
        $numeroDossier=" ";
        $formeJuridique=" ";
        if (!empty($data['numeroDossier'])) {
            $numero=$data['numeroDossier'];
           $numeroDossier=" AND d.id = '$numero'";
        }
        if (!empty($data['denominationSociale'])) {
            $denomination=$data['denominationSociale'];
            $denominationSociale=" AND d.denominationSociale like '$denomination'";
        }
        if (!empty($data['formeJuridique'])) {
            $form=$data['formeJuridique'];
           $formeJuridique=" AND d.idFormeJuridique = '$form'";
        }

        $dateDebut=empty($data['dateCreationDebut'])?date_format(new DateTime(),'Y-m-d'):date_format(new DateTime($data['dateCreationDebut']),'Y-m-d');
        $dateFin=empty($data['dateCreationFin'])?date_format(new DateTime(),'Y-m-d'):date_format(new DateTime($data['dateCreationFin']),'Y-m-d');
        $slqRequete = "SELECT e.denomination, d.* ,d.idUtilisateur 'idUserSaisi',d.idUserDepot ,
q.idUtilisateur 'UserCaisse',ft.libelle,f.sigle,q.datePaiement,TIMESTAMPDIFF(SECOND,d.dateCreation, q.datePaiement) AS nb_second FROM dossierdemande d 
            INNER JOIN formejuridique f ON f.id=d.idFormeJuridique
            INNER JOIN formejuridiquetraduction ft ON ft.idformeJuridique=f.id 
            INNER JOIN fos_user u ON u.id=d.idUserDepot 
            INNER JOIN entreprise e ON e.id=u.entreprise_id
            INNER JOIN quittance q ON q.idDossierDemande=d.id
            AND ft.idLangue=1
            AND d.statSuivieDepot=1
            AND d.statSuivieQuittance=1
            AND d.statSuivieSaisie=1 
            AND d.idUtilisateur=$user
            AND CAST(d.dateSaisie AS DATE) BETWEEN CAST('$dateDebut' AS DATE ) AND  CAST('$dateFin' AS DATE ) ".$denominationSociale.$numeroDossier.$formeJuridique." ORDER BY e.denomination ASC , d.dateSaisie DESC ";
        $stmt = $this->getEntityManager()->getConnection()->prepare($slqRequete);
       // die(dump($stmt));
        $stmt->execute();
        $results = $stmt->fetchAll();
       // die(dump($stmt));
        return $results;

    }

    public function findByParametres($critere, $forme, $dateCreation)
    {
        $query = $this->createQueryBuilder('a')
            ->join('a.formeJuridique', 'f');
        $query->Where('a.statut =2');


        if ($forme != '') {
            $query->andWhere('f.id = :forme')
                ->setParameter('forme', $forme);
        }

        if ($dateCreation != '') {
            $query->andWhere('a.dateCreation = :dateCreation')
                ->setParameter('dateCreation', new \DateTime($dateCreation));
        }
        if ($critere != '') {

            $query->andWhere('a.denominationSociale like  :deno')
                ->setParameter('deno', '%' . $critere . '%');

            $query->orWhere('a.nomCommercial like :nom')
                ->setParameter('nom', '%' . $critere . '%');

            $query->orWhere('a.enseigne like :enseigne')
                ->setParameter('enseigne', '%' . $critere . '%');

            $query->orWhere('a.sigle like :sigle')
                ->setParameter('sigle', '%' . $critere . '%');
        }


        $query->orderBy('a.id', 'desc');
        $results = $query->getQuery()->getResult();

        return $results;
    }

    public function findByNomCommercial($nomCommercial)
    {
        $query = $this->createQueryBuilder('a')
            ->where('upper(a.nomCommercial) like upper(:nomCom) and a.statut =2')
            ->orWhere('upper(a.denominationSociale) like upper(:denomSociale)')
            ->setParameters(array('nomCom' => '%' . $nomCommercial . '%', 'denomSociale' => '%' . $nomCommercial . '%'));
        return $query->getQuery()->getResult();
    }

    public function findAnnonceLegaleByParametres($data, $idLangue, $limit = null)
    {
        $query = $this->createQueryBuilder('a');
        $query->andWhere('a.statut=2');
        if ($data['id'] != '') {
            $query->andWhere('LOWER(a.id) = :id')
                ->setParameter('id', $data['id']);
        }

        if ($data['denominationSociale'] != '') {
            $query->andWhere('LOWER(a.denominationSociale) like :denominationSociale')
                ->setParameter('denominationSociale', '%' . $data['denominationSociale'] . '%');
        }
        if (isset($data['nomCommercial'])) {
            if ($data['nomCommercial'] != '') {
                $query->andWhere('LOWER(a.nomCommercial) like :nomCommercial')
                    ->setParameter('nomCommercial', '%' . $data['nomCommercial'] . '%');
            }
        }
        /* 	
          if($data['dateCreation'] != '')
          {
          $query->andWhere('DATE_DIFF(a.dateCreation,:dateCreation)=0')
          ->setParameter('dateCreation', $data['dateCreation']);
          } */

        if ($data['dateCreationDebut'] != '') {
            $query->andWhere('DATE_DIFF(a.dateDelivrance,:dateCreationDebut)>=0')
                ->setParameter('dateCreationDebut', new DateTime($data['dateCreationDebut']));
        }

        if ($data['dateCreationFin'] != '') {
            $query->andWhere('DATE_DIFF(a.dateDelivrance,:dateCreationFin)<=0')
                ->setParameter('dateCreationFin', new DateTime($data['dateCreationFin']));
        }

        if ($data['formeJuridique'] != '') {
            $query->andWhere('a.formeJuridique = :formeJuridique')
                ->setParameter('formeJuridique', $data['formeJuridique']);
        }

        /*      if ($data['typeOperation'] != '') {
          $query->andWhere('a.typeOperation = :typeOperation')
          ->setParameter('typeOperation', $data['typeOperation']);
          } */
        if ($limit) {
            $query->setMaxResults($limit);
        }
        $query->orderBy('a.dateDelivrance', 'DESC');

        $results = $query->getQuery()->getResult();


        $tabResult = array();
        $i = 0;
        foreach ($results as $result) {
            $tabResult[$i]['id'] = $result->getId();
            $formJ = $result->getFormeJuridique();
            $idf = $formJ->getId();
            $tabResult[$i]['idFormeJ'] = $idf;
            $formJTrad = $this->getEntityManager()->getRepository('BanquemondialeBundle:FormeJuridiqueTraduction')->getLibelleFormeJuridiqueByLanque($idLangue, $idf);
            ($formJTrad) ? $tabResult[$i]['libelleFormeJ'] = $formJTrad->getLibelle() : $tabResult[$i]['libelleFormeJ'] = "";
            $idTyp = $result->getTypeOperation()->getId();
            $tabResult[$i]['idTypeOp'] = $idTyp;
            $typeOpTrad = $this->getEntityManager()->getRepository('BanquemondialeBundle:TypeOperationTraduction')->getLibelleOperationByLanque($idLangue, $idf);

            ($typeOpTrad) ? $tabResult[$i]['libelleTypeOp'] = $typeOpTrad->getLibelle() : $tabResult[$i]['libelleTypeOp'] = "";

            $tabResult[$i]['denominationSociale'] = $result->getDenominationSociale();
            $tabResult[$i]['nomCommercial'] = $result->getnomCommercial();
            $tabResult[$i]['enseigne'] = $result->getEnseigne();
            $tabResult[$i]['telephone'] = $result->getTelephone();
            $tabResult[$i]['email'] = $result->getEmail();
            //$tabResult[$i]['fax'] = $result->getFax();
            $tabResult[$i]['region'] = $result->getRegion();
            $tabResult[$i]['dateCreation'] = $result->getDateDelivrance();
            //$tabResult[$i]['numeroRccm'] = $result->getNumeroRccm();
            //$tabResult[$i]['codeFiscal'] = $result->getCodeFiscal();
            //$tabResult[$i]['ninea'] = $result->getNinea();

            $i++;
        }
        //die(dump($tabResult));
        return $tabResult;
    }

    public function findAnnonceLegaleByNomCommercial($nomCommercial, $idLangue)
    {
        $query = $this->createQueryBuilder('a');
        $query->andWhere('a.statut=2');


        if ($nomCommercial) {
            $query->andWhere('LOWER(a.nomCommercial) like :nomCommercial')
                ->setParameter('nomCommercial', '%' . $nomCommercial . '%');
        }


        $results = $query->getQuery()->getResult();

        $tabResult = array();
        $i = 0;
        foreach ($results as $result) {
            $tabResult[$i]['id'] = $result->getId();
            $formJ = $result->getFormeJuridique();
            $idf = $formJ->getId();
            $tabResult[$i]['idFormeJ'] = $idf;
            $formJTrad = $this->getEntityManager()->getRepository('BanquemondialeBundle:FormeJuridiqueTraduction')->getLibelleFormeJuridiqueByLanque($idLangue, $idf);
            ($formJTrad) ? $tabResult[$i]['libelleFormeJ'] = $formJTrad->getLibelle() : $tabResult[$i]['libelleFormeJ'] = "";
            $idTyp = $result->getTypeOperation()->getId();
            $tabResult[$i]['idTypeOp'] = $idTyp;
            $typeOpTrad = $this->getEntityManager()->getRepository('BanquemondialeBundle:TypeOperationTraduction')->getLibelleOperationByLanque($idLangue, $idf);
            ($typeOpTrad) ? $tabResult[$i]['libelleTypeOp'] = $typeOpTrad->getLibelle() : $tabResult[$i]['libelleTypeOp'] = "";

            $tabResult[$i]['denominationSociale'] = $result->getDenominationSociale();
            $tabResult[$i]['nomCommercial'] = $result->getnomCommercial();
            $tabResult[$i]['enseigne'] = $result->getEnseigne();
            $tabResult[$i]['telephone'] = $result->getTelephone();
            $tabResult[$i]['email'] = $result->getEmail();
            //$tabResult[$i]['fax'] = $result->getFax();
            $tabResult[$i]['region'] = $result->getRegion();
            $tabResult[$i]['dateCreation'] = $result->getDateCreation();
            $i++;
        }
        //die(dump($tabResult));
        return $tabResult;
    }

//debut partie statistiques	


    public function listEntrepriseParFormJuridique($idFormeJuridique)
    {

        $stmt = $this->getEntityManager()->getConnection()->prepare('select * from dossierdemande  ');
        $stmt->execute();
        $results = $stmt->fetchAll();

        $tabResult = array();
        $tabResult['nombreTotal'] = count($results);

        return $tabResult;
    }

    public function listEntrepriseParFormJuridiqueAll($datedebut, $datefin)
    {
        // die(dump($datedebut));         
        $sqlQuery = 'SELECT count(*) as nbr, case month(A.dateDelivrance) 
		when 1 then "janvier"
		when 2 then "fevrier"
		when 3 then "mars"
		when 4 then "avril"
		when 5 then "mai"
		when 6 then "juin"
		when 7 then "juillet"
		when 8 then "aout"
		when 9 then "septembre"
		when 10 then "octobre"
		when 11 then "novembre"
		when 12 then "decembre"   
		end  as mois,year(A.dateDelivrance) as an FROM dossierdemande 
		A left join  formejuridique B on (A.idFormeJuridique=B.id) WHERE A.statut = 2 ';
        if ($datedebut != '') {
            $sqlQuery = $sqlQuery . ' and  A.dateDelivrance >= "' . date("Y-m-d", strtotime($datedebut)) . '"';
        }

        if ($datefin != '') {
            $sqlQuery = $sqlQuery . ' and  A.dateDelivrance <= "' . date("Y-m-d", strtotime($datefin)) . '"';
        }

        $sqlQuery = $sqlQuery . ' group by year(A.dateDelivrance),month(A.dateDelivrance)';

        $stmt = $this->getEntityManager()->getConnection()->prepare($sqlQuery);
        $stmt->execute();

        //die(dump($stmt));

        $results = $stmt->fetchAll();

        //die(dump(count($results)));
        $tabResult = array();
        $i = 0;
        foreach ($results as $result) {
            $tabResult[$i][0] = $result['mois'];
            $tabResult[$i][1] = $result['an'];
            $tabResult[$i][2] = floatval($result['nbr']);
            $i++;
        }
        //die(dump($tabResult));       
        return $tabResult;
    }

    public function listEntrepriseParFormJur($datedebut, $datefin)
    {

        $sqlRequete = 'Select count(A.id) as nbrTotal,
		count(case when Month(A.dateDelivrance) = 1 then 1 else null end) as janvier,
		count(case when Month(A.dateDelivrance) = 2 then 1 else null end) as fevrier,
		count(case when Month(A.dateDelivrance) = 3  then 1 else null end) as mars,
		count(case when Month(A.dateDelivrance) = 4  then 1 else null end) as avril ,
		count(case when Month(A.dateDelivrance) = 5  then 1 else null end) as mai ,
		count(case when Month(A.dateDelivrance) = 6  then 1 else null end) as juin ,
		count(case when Month(A.dateDelivrance) = 7   then 1 else null end) as juillet,
		count(case when Month(A.dateDelivrance) = 8  then 1 else null end) as aout ,
		count(case when Month(A.dateDelivrance) = 9  then 1 else null end) as septembre ,
		count(case when Month(A.dateDelivrance) = 10  then 1 else null end) as octobre,
		count(case when Month(A.dateDelivrance) = 11   then 1 else null end) as novembre ,
		count(case when Month(A.dateDelivrance) = 12  then 1 else null end) as decembre ,
		C.sigle 
		FROM dossierdemande  A left join  formejuridique B on (A.idFormeJuridique=B.id) join formeJuridiqueTraduction C on B.id = C.idFormeJuridique WHERE A.statut = 2 and C.idLangue = 2';

        if ($datedebut != '') {
            $sqlRequete = $sqlRequete . ' and  A.dateDelivrance >= "' . date("Y-m-d", strtotime($datedebut)) . '"';
        }

        if ($datefin != '') {
            $sqlRequete = $sqlRequete . ' and  A.dateDelivrance <= "' . date("Y-m-d", strtotime($datefin)) . '"';
        }

        $sqlRequete = $sqlRequete . ' group by A.idFormeJuridique';

        $stmt = $this->getEntityManager()->getConnection()->prepare($sqlRequete);
        $stmt->execute();

        $results = $stmt->fetchAll();

        //die(dump(count($results)));
        $tabSerie = array();
        $data = array();

        $i = 0;
        foreach ($results as $result) {

            $tabSerie[$i]['name'] = $result['sigle'];
            $data = array();

            $data[0] = floatval($result['janvier']);
            $data[1] = floatval($result['fevrier']);
            $data[2] = floatval($result['mars']);
            $data[3] = floatval($result['avril']);
            $data[4] = floatval($result['mai']);
            $data[5] = floatval($result['juin']);
            $data[6] = floatval($result['juillet']);
            $data[7] = floatval($result['aout']);
            $data[8] = floatval($result['septembre']);
            $data[9] = floatval($result['octobre']);
            $data[10] = floatval($result['novembre']);
            $data[11] = floatval($result['decembre']);

            $tabSerie[$i]['data'] = $data;
            if ($i == 0) {
                $tabSerie[$i]['color'] = '#750add';
            }
            // $tabResult[$i][0] = $result['libelle']."(".$result['an'].")";
            //$tabResult[$i][1] = floatval($result['nbr']);             
            $i++;
        }

        //die(dump($tabResult));

        return $tabSerie;
    }

    public function listEntrepriseSecteur($datedebut, $datefin, $idLangue)
    {

        $slqRequete = 'Select count(A.id) as nbrTotal,C.libelle 
	FROM dossierdemande  A left join  secteuractivite B on (A.idSecteurActivite=B.id) 
	left  join secteuractivitetraduction C on (B.id=C.idSecteurActivite and C.idLangue=' . $idLangue . ')
	WHERE A.statut = 2 ';

        if ($datedebut != '') {
            $slqRequete = $slqRequete . ' and  A.dateDelivrance >= "' . date("Y-m-d", strtotime($datedebut)) . '"';
        }

        if ($datefin != '') {
            $slqRequete = $slqRequete . ' and  A.dateDelivrance <= "' . date("Y-m-d", strtotime($datefin)) . '"';
        }

        $slqRequete = $slqRequete . ' group by A.idSecteurActivite';

        $stmt = $this->getEntityManager()->getConnection()->prepare($slqRequete);
        $stmt->execute();
        //die(dump($stmt));

        $results = $stmt->fetchAll();

        $tabSerie = array();
        $data = array();

        $i = 0;
        foreach ($results as $result) {
            $tabSerie[$i]['name'] = $result['libelle'];
            $data = array();
            $data[0] = floatval($result['nbrTotal']);
            $tabSerie[$i]['data'] = $data;
            if ($i == 0) {
                $tabSerie[$i]['color'] = '#750add';
            }
            // $tabResult[$i][0] = $result['libelle']."(".$result['an'].")";
            //$tabResult[$i][1] = floatval($result['nbr']);              
            $i++;
        }
        //die(dump($tabSerie));

        return $tabSerie;
    }

    public function getlistAnne($datedebut, $datefin)
    {

        $slqRequete = 'SELECT distinct year(A.dateDelivrance)as an from dossierdemande A WHERE A.statut = 2 ';

        if ($datedebut != '') {
            $slqRequete = $slqRequete . ' and year(A.dateDelivrance) >= "' . date("Y-m-d", strtotime($datedebut)) . '" ';
        }

        if ($datefin != '') {
            $slqRequete = $slqRequete . ' and year(A.dateDelivrance) <= "' . date("Y-m-d", strtotime($datefin)) . '" ';
        }

        $slqRequete = $slqRequete . ' order by year(A.dateDelivrance) ';

        $stmt = $this->getEntityManager()->getConnection()->prepare($slqRequete);

        $stmt->execute();
        $results = $stmt->fetchAll();

        $tabSerie = array();
        $i = 0;
        foreach ($results as $result) {
            $tabSerie[$i] = $result['an'];
            $i++;
        }
        return $tabSerie;
    }

    public function getlistPays()
    {

        $stmt = $this->getEntityManager()->getConnection()
            ->prepare('select distinct C.libelle FROM dossierdemande  A left join pays  B on (A.idPays=B.id) 
		left  join paystraduction C on (B.id=C.idPays and C.idLangue=1) WHERE A.statut = 2  order by A.idPays');
        $stmt->execute();
        $results = $stmt->fetchAll();

        $tabResult = array();
        $i = 0;
        foreach ($results as $result) {
            $tabResult[$i] = $result['libelle'];
            $i++;
        }

        return $tabResult;
    }

    public function getValueParPays($datedebut, $datefin, $serieTitle)
    {

        $slqRequete = 'Select count(A.id) as nbrTotal,year(A.dateDelivrance) FROM dossierdemande  A WHERE A.statut = 2 ';

        if ($datedebut != '') {
            $slqRequete = $slqRequete . ' and year(A.dateDelivrance) >= "' . date("Y-m-d", strtotime($datedebut)) . '" ';
        }

        if ($datefin != '') {
            $slqRequete = $slqRequete . ' and year(A.dateDelivrance) <= "' . date("Y-m-d", strtotime($datefin)) . '" ';
        }

        $slqRequete = $slqRequete . ' group by year(A.dateDelivrance) order by year(A.dateDelivrance) ';

        $stmt = $this->getEntityManager()->getConnection()->prepare($slqRequete);
        $stmt->execute();

        $results = $stmt->fetchAll();


        $tabResult = array();
        $tabSerie = array();
        $i = 0;
        foreach ($results as $result) {
            $tabResult[$i] = floatval($result['nbrTotal']);
            $i++;
        }
        if ($datedebut != '') {
            //die(dump($tabResult));
        }

        $tabSerie[0]['name'] = $serieTitle;
        $tabSerie[0]['data'] = $tabResult;

        return $tabSerie;
    }

    public function getlistInvestisseurs($idLangue)
    {

        $sqlQuery = "select SUM(nbrInvestisseur) as nbrInvestisseur , code, libelle , longitude, latitude from (SELECT count(p.code) as nbrInvestisseur,p.code as code, pt.libelle as libelle, co.longitude as longitude, co.latitude as latitude 
						FROM associe ass 
						join dossierdemande dd on ass.idDossierDemande = dd.id 
						join pays p on ass.idPays = p.id 
						join paysTraduction pt on pt.idPays = p.id  
						join coordonnees co on UPPER(p.code) = UPPER(co.code)
						join documentCollected dc on dc.idDossierDemande = dd.id						
						where dc.idPole = 1 and pt.idLangue =:idLangue 											
						group by p.code
						UNION
						SELECT count(p.code) as nbrInvestisseur,p.code as code, pt.libelle as libelle, co.longitude as longitude, co.latitude as latitude 
						FROM representant ass 
						join dossierdemande dd on ass.idDossierDemande = dd.id 
						join pays p on ass.idPays = p.id 
						join paysTraduction pt on pt.idPays = p.id  
						join coordonnees co on UPPER(p.code) = UPPER(co.code)
						join documentCollected dc on dc.idDossierDemande = dd.id
						where dc.idPole = 1 and pt.idLangue =:idLangue 
						group by p.code) as table1 group by code";

        $parameters['idLangue'] = $idLangue;

        $stmt = $this->getEntityManager()->getConnection()->prepare($sqlQuery);
        $stmt->execute($parameters);


        $results = $stmt->fetchAll();

        $tabResult = array();
        $i = 0;
        foreach ($results as $result) {
            $tabResult[$i]['codePays'] = $result['code'];
            $tabResult[$i]['libelle'] = $result['libelle'];
            $tabResult[$i]['nbrInvestisseur'] = $result['nbrInvestisseur'];
            $tabResult[$i]['latitude'] = $result['latitude'];
            $tabResult[$i]['longitude'] = $result['longitude'];
            $i++;
        }
        //die(dump($tabResult));
        return $tabResult;
    }

    public function listEntrepriseParPeriodeExcel($dateDebut, $dateFin, $typePeriode = null)
    {
        $sqlQuery = 'SELECT count(*) as nbr, day(dc.dateDelivrance) as jours, case month(dc.dateDelivrance)
		when 1 then "janvier"
		when 2 then "fevrier"
		when 3 then "mars"
		when 4 then "avril"
		when 5 then "mai"
		when 6 then "juin"
		when 7 then "juillet"
		when 8 then "aout"
		when 9 then "septembre"
		when 10 then "octobre"
		when 11 then "novembre"
		when 12 then "decembre"
		end  as mois,
    year(dc.dateDelivrance) as an FROM documentCollected dc join pole p on dc.idPole = p.id where idStatutTraitement = 2 and UPPER(p.sigle) = "GF" ';


        if ($dateDebut != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) >= "' . date("Y-m-d", strtotime($dateDebut)) . '"';
        }

        if ($dateFin != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) <= "' . date("Y-m-d", strtotime($dateFin)) . '"';
        }

        $sqlQuery = $sqlQuery . ' group by year(dc.dateDelivrance) ';

        if ($typePeriode == 'mois') {
            $sqlQuery = $sqlQuery . ' , month(dc.dateDelivrance)';
        } else if ($typePeriode == 'jours') {
            $sqlQuery = $sqlQuery . ' , month(dc.dateDelivrance) ,day(dc.dateDelivrance)';
        }

        $sqlQuery = $sqlQuery . ' order by dc.dateDelivrance asc';

        $stmt = $this->getEntityManager()->getConnection()->prepare($sqlQuery);
        $stmt->execute();

        $results = $stmt->fetchAll();

        $tabResult = array();

        $i = 0;
        foreach ($results as $result) {
            $tabResult[$i][0] = $result['jours'];
            $tabResult[$i][1] = $result['mois'];
            $tabResult[$i][2] = $result['an'];
            $tabResult[$i][3] = intval($result['nbr']);
            $i++;
        }

        return $tabResult;
    }

    public function listEntrepriseNotaireParPeriodeExcel($dateDebut, $dateFin, $typePeriode = null)
    {
        $sqlQuery = 'SELECT count(*) as nbr, ent.denomination
		FROM documentCollected dc join pole p on dc.idPole = p.id  
		join dossierDemande dd on dc.idDossierDemande = dd.id
		join typeDossier td on dd.idTypeDossier = td.id
		join fos_user u on dd.idUtilisateur = u.id
        join entreprise ent on u.entreprise_id = ent.id
		where idStatutTraitement = 2 and UPPER(p.sigle) = "GF" and td.id = 7 ';


        if ($dateDebut != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) >= "' . date("Y-m-d", strtotime($dateDebut)) . '"';
        }

        if ($dateFin != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) <= "' . date("Y-m-d", strtotime($dateFin)) . '"';
        }

        $sqlQuery = $sqlQuery . ' group by ent.denomination ';


        $sqlQuery = $sqlQuery . ' order by dc.dateDelivrance asc';

        $stmt = $this->getEntityManager()->getConnection()->prepare($sqlQuery);
        $stmt->execute();

        $results = $stmt->fetchAll();

        $tabResult = array();

        $i = 0;
        foreach ($results as $result) {
            $tabResult[$i][0] = $result['denomination'];
            $tabResult[$i][1] = intval($result['nbr']);
            $i++;
        }

        return $tabResult;
    }

    public function listEntrepriseParPeriodeGraphe($ent = 0, $dateDebut, $dateFin, $plageDate = null, $typePeriode = null)
    {
        $sqlQuery = 'SELECT count(*) as nbr, day(dc.dateDelivrance) as jours,  month(dc.dateDelivrance)as mois,
    year(dc.dateDelivrance) as an FROM documentCollected dc join pole p on dc.idPole = p.id        
    join dossierDemande dd on dc.idDossierDemande = dd.id 
    join fos_user u on dd.idUtilisateur = u.id    
    left join entreprise e on u.entreprise_id = e.id
    where idStatutTraitement = 2 and UPPER(p.sigle) = "GF" 
    ';


        if ($dateDebut != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) >= "' . date("Y-m-d", strtotime($dateDebut)) . '"';
        }

        if ($dateFin != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) <= "' . date("Y-m-d", strtotime($dateFin)) . '"';
        }

        if ($ent && $ent != 0) {
            $sqlQuery = $sqlQuery . ' and e.id=' . $ent;
        }
        $sqlQuery = $sqlQuery . ' group by year(dc.dateDelivrance) ';

        if ($typePeriode == 'mois') {
            $sqlQuery = $sqlQuery . ' , month(dc.dateDelivrance)';
        } else if ($typePeriode == 'jours') {
            $sqlQuery = $sqlQuery . ' , month(dc.dateDelivrance) ,day(dc.dateDelivrance)';
        }

        $sqlQuery = $sqlQuery . ' order by dc.dateDelivrance asc';

        $stmt = $this->getEntityManager()->getConnection()->prepare($sqlQuery);
        $stmt->execute();

        $results = $stmt->fetchAll();

        $tabResult = array();
        $i = 0;
        foreach ($plageDate as $dateCreation) {
            $j = 0;
            if ($results != array()) {
                foreach ($results as $result) {
                    if (($dateCreation == sprintf("%02d", $result['jours']) . '-' . sprintf("%02d", $result['mois']) . '-' . $result['an'] && $typePeriode == 'jours') || (substr($dateCreation, 3, 7) == sprintf("%02d", $result['mois']) . '-' . $result['an'] && $typePeriode == 'mois') || (substr($dateCreation, 6, 4) == $result['an'] && $typePeriode == null)) {
                        $tabResult[$i][0] = sprintf("%02d", $result['jours']);
                        $tabResult[$i][1] = sprintf("%02d", $result['mois']);
                        $tabResult[$i][2] = $result['an'];
                        $tabResult[$i][3] = intval($result['nbr']);
                        break;
                    } else {
                        $tabResult[$i][0] = substr($dateCreation, 0, 2);
                        $tabResult[$i][1] = substr($dateCreation, 3, 2);
                        $tabResult[$i][2] = substr($dateCreation, 6, 4);
                        $tabResult[$i][3] = 0;
                    }

                    $j++;
                }
                $i++;
            } else {
                $tabResult[$i][0] = substr($dateCreation, 0, 2);
                $tabResult[$i][1] = substr($dateCreation, 3, 2);
                $tabResult[$i][2] = substr($dateCreation, 6, 4);
                $tabResult[$i][3] = 0;
                $i++;
            }
        }

        return $tabResult;
    }

    public function listEntrepriseNotaireParPeriodeGraphe($dateDebut, $dateFin, $plageDate = null, $typePeriode = null)
    {
        $sqlQuery = 'SELECT count(*) as nbr, day(dc.dateDelivrance) as jours,  month(dc.dateDelivrance)as mois,
			year(dc.dateDelivrance) as an 
			FROM documentCollected dc join pole p on dc.idPole = p.id 
			join dossierDemande dd on dc.idDossierDemande = dd.id
			join typeDossier td on dd.idTypeDossier = td.id
			where idStatutTraitement = 2 and UPPER(p.sigle) = "GF" and td.id = 7 ';


        if ($dateDebut != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) >= "' . date("Y-m-d", strtotime($dateDebut)) . '"';
        }

        if ($dateFin != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) <= "' . date("Y-m-d", strtotime($dateFin)) . '"';
        }

        $sqlQuery = $sqlQuery . ' group by year(dc.dateDelivrance) ';

        if ($typePeriode == 'mois') {
            $sqlQuery = $sqlQuery . ' , month(dc.dateDelivrance)';
        } else if ($typePeriode == 'jours') {
            $sqlQuery = $sqlQuery . ' , month(dc.dateDelivrance) ,day(dc.dateDelivrance)';
        }

        $sqlQuery = $sqlQuery . ' order by dc.dateDelivrance asc';

        $stmt = $this->getEntityManager()->getConnection()->prepare($sqlQuery);
        $stmt->execute();

        $results = $stmt->fetchAll();

        $tabResult = array();
        $i = 0;
        foreach ($plageDate as $dateCreation) {
            $j = 0;
            if ($results != array()) {
                foreach ($results as $result) {
                    if (($dateCreation == sprintf("%02d", $result['jours']) . '-' . sprintf("%02d", $result['mois']) . '-' . $result['an'] && $typePeriode == 'jours') || (substr($dateCreation, 3, 7) == sprintf("%02d", $result['mois']) . '-' . $result['an'] && $typePeriode == 'mois') || (substr($dateCreation, 6, 4) == $result['an'] && $typePeriode == null)) {
                        $tabResult[$i][0] = sprintf("%02d", $result['jours']);
                        $tabResult[$i][1] = sprintf("%02d", $result['mois']);
                        $tabResult[$i][2] = $result['an'];
                        $tabResult[$i][3] = intval($result['nbr']);
                        break;
                    } else {
                        $tabResult[$i][0] = substr($dateCreation, 0, 2);
                        $tabResult[$i][1] = substr($dateCreation, 3, 2);
                        $tabResult[$i][2] = substr($dateCreation, 6, 4);
                        $tabResult[$i][3] = 0;
                    }

                    $j++;
                }
                $i++;
            } else {
                $tabResult[$i][0] = substr($dateCreation, 0, 2);
                $tabResult[$i][1] = substr($dateCreation, 3, 2);
                $tabResult[$i][2] = substr($dateCreation, 6, 4);
                $tabResult[$i][3] = 0;
                $i++;
            }
        }

        return $tabResult;
    }

    public function listEntrepriseParPeriodeCNSSGraphe($dateDebut, $dateFin, $plageDate = null, $typePeriode = null)
    {
        $sqlQuery = 'SELECT count(*) as nbr, day(dc.dateDelivrance) as jours,  month(dc.dateDelivrance)as mois,
    year(dc.dateDelivrance) as an FROM documentCollected dc join pole p on dc.idPole = p.id where idStatutTraitement = 2 and UPPER(p.sigle) = "CNSS" ';


        if ($dateDebut != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) >= "' . date("Y-m-d", strtotime($dateDebut)) . '"';
        }

        if ($dateFin != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) <= "' . date("Y-m-d", strtotime($dateFin)) . '"';
        }

        $sqlQuery = $sqlQuery . ' group by year(dc.dateDelivrance) ';

        if ($typePeriode == 'mois') {
            $sqlQuery = $sqlQuery . ' , month(dc.dateDelivrance)';
        } else if ($typePeriode == 'jours') {
            $sqlQuery = $sqlQuery . ' , month(dc.dateDelivrance) ,day(dc.dateDelivrance)';
        }

        $sqlQuery = $sqlQuery . ' order by dc.dateDelivrance asc';

        $stmt = $this->getEntityManager()->getConnection()->prepare($sqlQuery);
        $stmt->execute();

        $results = $stmt->fetchAll();

        $tabResult = array();
        $i = 0;
        foreach ($plageDate as $dateCreation) {
            $j = 0;
            if ($results != array()) {
                foreach ($results as $result) {
                    if (($dateCreation == sprintf("%02d", $result['jours']) . '-' . sprintf("%02d", $result['mois']) . '-' . $result['an'] && $typePeriode == 'jours') || (substr($dateCreation, 3, 7) == sprintf("%02d", $result['mois']) . '-' . $result['an'] && $typePeriode == 'mois') || (substr($dateCreation, 6, 4) == $result['an'] && $typePeriode == null)) {
                        $tabResult[$i][0] = sprintf("%02d", $result['jours']);
                        $tabResult[$i][1] = sprintf("%02d", $result['mois']);
                        $tabResult[$i][2] = $result['an'];
                        $tabResult[$i][3] = intval($result['nbr']);
                        break;
                    } else {
                        $tabResult[$i][0] = substr($dateCreation, 0, 2);
                        $tabResult[$i][1] = substr($dateCreation, 3, 2);
                        $tabResult[$i][2] = substr($dateCreation, 6, 4);
                        $tabResult[$i][3] = 0;
                    }

                    $j++;
                }
                $i++;
            } else {
                $tabResult[$i][0] = substr($dateCreation, 0, 2);
                $tabResult[$i][1] = substr($dateCreation, 3, 2);
                $tabResult[$i][2] = substr($dateCreation, 6, 4);
                $tabResult[$i][3] = 0;
                $i++;
            }
        }

        return $tabResult;
    }
    public function listEntrepriseParPeriodeGrapheAnnuel($dateDebut, $dateFin, $plageDate = null, $typePeriode = null)
    {
        $sqlQuery = 'SELECT count(*) as nbr, day(dc.dateDelivrance) as jours,  month(dc.dateDelivrance)as mois,
    year(dc.dateDelivrance) as an FROM documentCollected dc join pole p on dc.idPole = p.id where idStatutTraitement = 2 and UPPER(p.sigle) = "GF" ';


        if ($dateDebut != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) >= "' . date("Y-m-d", strtotime($dateDebut)) . '"';
        }

        if ($dateFin != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) <= "' . date("Y-m-d", strtotime($dateFin)) . '"';
        }

        $sqlQuery = $sqlQuery . ' group by month(dc.dateDelivrance) ';


        $sqlQuery = $sqlQuery . ' order by dc.dateDelivrance asc';

        $stmt = $this->getEntityManager()->getConnection()->prepare($sqlQuery);
        $stmt->execute();

        $results = $stmt->fetchAll();

        $tabResult = array();
        $i = 0;

        foreach ($plageDate as $moisCreation) {
            $j = 0;
            if ($results != array()) {
                foreach ($results as $result) {
                    if ($moisCreation == sprintf("%02d", $result['mois'])) {
                        $tabResult[$i][0] = sprintf("%02d", $result['jours']);
                        $tabResult[$i][1] = sprintf("%02d", $result['mois']);
                        $tabResult[$i][2] = $result['an'];
                        $tabResult[$i][3] = intval($result['nbr']);
                        break;
                    } else {
                        $tabResult[$i][0] = 0;
                        $tabResult[$i][1] = $moisCreation;
                        $tabResult[$i][2] = 0;
                        $tabResult[$i][3] = 0;
                    }

                    $j++;
                }
                $i++;
            } else {
                $tabResult[$i][0] = 0;
                $tabResult[$i][1] = $moisCreation;
                $tabResult[$i][2] = 0;
                $tabResult[$i][3] = 0;
                $i++;
            }
        }

        return $tabResult;
    }
    public function listEntrepriseNotaireParPeriodeGrapheAnnuel($dateDebut, $dateFin, $plageDate = null, $typePeriode = null)
    {
        $sqlQuery = 'SELECT count(*) as nbr, day(dc.dateDelivrance) as jours,  month(dc.dateDelivrance)as mois,
			year(dc.dateDelivrance) as an FROM documentCollected dc join pole p on dc.idPole = p.id 
			join dossierDemande dd on dc.idDossierDemande = dd.id
			join typeDossier td on dd.idTypeDossier = td.id
			where idStatutTraitement = 2 and UPPER(p.sigle) = "GF" and td.id = 7 ';


        if ($dateDebut != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) >= "' . date("Y-m-d", strtotime($dateDebut)) . '"';
        }

        if ($dateFin != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) <= "' . date("Y-m-d", strtotime($dateFin)) . '"';
        }

        $sqlQuery = $sqlQuery . ' group by month(dc.dateDelivrance) ';


        $sqlQuery = $sqlQuery . ' order by dc.dateDelivrance asc';

        $stmt = $this->getEntityManager()->getConnection()->prepare($sqlQuery);
        $stmt->execute();

        $results = $stmt->fetchAll();

        $tabResult = array();
        $i = 0;

        foreach ($plageDate as $moisCreation) {
            $j = 0;
            if ($results != array()) {
                foreach ($results as $result) {
                    if ($moisCreation == sprintf("%02d", $result['mois'])) {
                        $tabResult[$i][0] = sprintf("%02d", $result['jours']);
                        $tabResult[$i][1] = sprintf("%02d", $result['mois']);
                        $tabResult[$i][2] = $result['an'];
                        $tabResult[$i][3] = intval($result['nbr']);
                        break;
                    } else {
                        $tabResult[$i][0] = 0;
                        $tabResult[$i][1] = $moisCreation;
                        $tabResult[$i][2] = 0;
                        $tabResult[$i][3] = 0;
                    }

                    $j++;
                }
                $i++;
            } else {
                $tabResult[$i][0] = 0;
                $tabResult[$i][1] = $moisCreation;
                $tabResult[$i][2] = 0;
                $tabResult[$i][3] = 0;
                $i++;
            }
        }

        return $tabResult;
    }
    public function listEntrepriseParPeriodeCNSSGrapheAnnuel($dateDebut, $dateFin, $plageDate = null, $typePeriode = null)
    {
        $sqlQuery = 'SELECT count(*) as nbr, day(dc.dateDelivrance) as jours,  month(dc.dateDelivrance)as mois,
    year(dc.dateDelivrance) as an FROM documentCollected dc join pole p on dc.idPole = p.id where idStatutTraitement = 2 and UPPER(p.sigle) = "CNSS" ';


        if ($dateDebut != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) >= "' . date("Y-m-d", strtotime($dateDebut)) . '"';
        }

        if ($dateFin != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) <= "' . date("Y-m-d", strtotime($dateFin)) . '"';
        }

        $sqlQuery = $sqlQuery . ' group by month(dc.dateDelivrance) ';


        $sqlQuery = $sqlQuery . ' order by dc.dateDelivrance asc';

        $stmt = $this->getEntityManager()->getConnection()->prepare($sqlQuery);
        $stmt->execute();

        $results = $stmt->fetchAll();

        $tabResult = array();
        $i = 0;

        foreach ($plageDate as $moisCreation) {
            $j = 0;
            if ($results != array()) {
                foreach ($results as $result) {
                    if ($moisCreation == sprintf("%02d", $result['mois'])) {
                        $tabResult[$i][0] = sprintf("%02d", $result['jours']);
                        $tabResult[$i][1] = sprintf("%02d", $result['mois']);
                        $tabResult[$i][2] = $result['an'];
                        $tabResult[$i][3] = intval($result['nbr']);
                        break;
                    } else {
                        $tabResult[$i][0] = 0;
                        $tabResult[$i][1] = $moisCreation;
                        $tabResult[$i][2] = 0;
                        $tabResult[$i][3] = 0;
                    }

                    $j++;
                }
                $i++;
            } else {
                $tabResult[$i][0] = 0;
                $tabResult[$i][1] = $moisCreation;
                $tabResult[$i][2] = 0;
                $tabResult[$i][3] = 0;
                $i++;
            }
        }

        return $tabResult;
    }
    public function listEntrepriseParGenre($dateDebut, $dateFin, $idLangue)
    {
        $sqlQuery = 'SELECT distinct count(*) as nbr, gt.libelle as genre
					FROM documentCollected dc
					join pole p on dc.idPole = p.id
					join dossierDemande dd on dc.idDossierDemande = dd.id
					inner join representant rep on rep.id=
                                        (select min(id) from representant where iddossierDemande=dd.id)                                         			
					join genre g on rep.idGenre = g.id
					join genreTraduction gt on gt.idGenre = g.id and gt.idLangue=:idLangue
					where idStatutTraitement = 2 and UPPER(p.sigle) = "GF"';


        if ($dateDebut != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) >= "' . date("Y-m-d", strtotime($dateDebut)) . '"';
        }

        if ($dateFin != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) <= "' . date("Y-m-d", strtotime($dateFin)) . '"';
        }

        $sqlQuery = $sqlQuery . ' group by genre';


        $stmt = $this->getEntityManager()->getConnection()->prepare($sqlQuery);
        $stmt->bindParam(':idLangue', $idLangue);
        $stmt->execute();

        $results = $stmt->fetchAll();
        //die(dump($results));
        $tabResult = array();

        $i = 0;
        foreach ($results as $result) {
            $tabResult[$i][0] = $result['genre'];
            $tabResult[$i][1] = intval($result['nbr']);
            $i++;
        }


        return $tabResult;
    }
    public function listeNbEntrepriseParGenreGrapheAnnuel($dateDebut, $dateFin, $idLangue, $genre, $plageDate = null)
    {
        $sqlQuery = 'SELECT distinct count(*) as nbr, gt.libelle as genre, day(dc.dateDelivrance) as jours,  month(dc.dateDelivrance)as mois,
					year(dc.dateDelivrance) as an 
					FROM documentCollected dc
					join pole p on dc.idPole = p.id
					join dossierDemande dd on dc.idDossierDemande = dd.id
                    inner join representant rep on rep.id= (select min(id) from representant where iddossierDemande=dd.id) 
					join genre g on rep.idGenre = g.id
					join genreTraduction gt on gt.idGenre = g.id and gt.idLangue=1
					where idStatutTraitement = 2 and UPPER(p.sigle) = "GF" ';


        if ($dateDebut != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) >= "' . date("Y-m-d", strtotime($dateDebut)) . '"';
        }

        if ($dateFin != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) <= "' . date("Y-m-d", strtotime($dateFin)) . '"';
        }

        if ($genre == 'homme') {
            $sqlQuery = $sqlQuery . ' and upper(g.code) = "H" ';
        }

        if ($genre == 'femme') {
            $sqlQuery = $sqlQuery . ' and upper(g.code) = "F" ';
        }


        $sqlQuery = $sqlQuery . ' group by year(dc.dateDelivrance), month(dc.dateDelivrance) ';


        $sqlQuery = $sqlQuery . ' order by dc.dateDelivrance asc';

        $stmt = $this->getEntityManager()->getConnection()->prepare($sqlQuery);
        $stmt->execute();

        $results = $stmt->fetchAll();

        //die(dump($results));
        $tabResult = array();
        $i = 0;

        foreach ($plageDate as $dateCreation) {
            $j = 0;
            if ($results != array()) {
                foreach ($results as $result) {
                    if (substr($dateCreation, 3, 7) == sprintf("%02d", $result['mois']) . '-' . $result['an']) {
                        $tabResult[$i][0] = sprintf("%02d", $result['jours']);
                        $tabResult[$i][1] = sprintf("%02d", $result['mois']);
                        $tabResult[$i][2] = $result['an'];
                        $tabResult[$i][3] = intval($result['nbr']);
                        break;
                    } else {
                        $tabResult[$i][0] = substr($dateCreation, 0, 2);
                        $tabResult[$i][1] = substr($dateCreation, 3, 2);
                        $tabResult[$i][2] = substr($dateCreation, 6, 4);
                        $tabResult[$i][3] = 0;
                    }

                    $j++;
                }
                $i++;
            } else {
                $tabResult[$i][0] = substr($dateCreation, 0, 2);
                $tabResult[$i][1] = substr($dateCreation, 3, 2);
                $tabResult[$i][2] = substr($dateCreation, 6, 4);
                $tabResult[$i][3] = 0;
                $i++;
            }
        }


        return $tabResult;
    }
    public function listeNbEntrepriseParFormeJurique($dateDebut, $dateFin, $idLangue)
    {
        $sqlQuery = 'SELECT distinct count(*) as nbr, ft.libelle as formeJuridique
					FROM documentCollected dc
					join pole p on dc.idPole = p.id
					join dossierDemande dd on dc.idDossierDemande = dd.id                                        			
					join formeJuridique f on dd.idFormeJuridique = f.id
					join formeJuridiqueTraduction ft on ft.idFormeJuridique = f.id and ft.idLangue=:idLangue
					where idStatutTraitement = 2 and UPPER(p.sigle) = "GF" ';


        if ($dateDebut != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) >= "' . date("Y-m-d", strtotime($dateDebut)) . '"';
        }

        if ($dateFin != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) <= "' . date("Y-m-d", strtotime($dateFin)) . '"';
        }

        $sqlQuery = $sqlQuery . ' group by formeJuridique';


        $stmt = $this->getEntityManager()->getConnection()->prepare($sqlQuery);
        $stmt->bindParam(':idLangue', $idLangue);
        $stmt->execute();

        $results = $stmt->fetchAll();
        //die(dump($results));
        $tabResult = array();

        $i = 0;
        foreach ($results as $result) {
            $tabResult[$i][0] = $result['formeJuridique'];
            $tabResult[$i][1] = intval($result['nbr']);
            $i++;
        }


        return $tabResult;
    }
    public function listeNbEntrepriseNotaireParFormeJurique($dateDebut, $dateFin, $idLangue)
    {
        $sqlQuery = 'SELECT distinct count(*) as nbr, ft.libelle as formeJuridique
					FROM documentCollected dc
					join pole p on dc.idPole = p.id
					join dossierDemande dd on dc.idDossierDemande = dd.id                                        			
					join formeJuridique f on dd.idFormeJuridique = f.id
					join formeJuridiqueTraduction ft on ft.idFormeJuridique = f.id and ft.idLangue=:idLangue
					where idStatutTraitement = 2 and UPPER(p.sigle) = "GF" and dd.idTypeDossier = 7';


        if ($dateDebut != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) >= "' . date("Y-m-d", strtotime($dateDebut)) . '"';
        }

        if ($dateFin != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) <= "' . date("Y-m-d", strtotime($dateFin)) . '"';
        }

        $sqlQuery = $sqlQuery . ' group by formeJuridique';


        $stmt = $this->getEntityManager()->getConnection()->prepare($sqlQuery);
        $stmt->bindParam(':idLangue', $idLangue);
        $stmt->execute();

        $results = $stmt->fetchAll();
        //die(dump($results));
        $tabResult = array();

        $i = 0;
        foreach ($results as $result) {
            $tabResult[$i][0] = $result['formeJuridique'];
            $tabResult[$i][1] = intval($result['nbr']);
            $i++;
        }


        return $tabResult;
    }
    public function listeNbEntrepriseParFormeJuriqueGrapheAnnuel($dateDebut, $dateFin, $idLangue, $formeJuridique, $plageDate = null)
    {
        $sqlQuery = 'SELECT distinct count(*) as nbr, ft.libelle as formeJuridique, day(dc.dateDelivrance) as jours,  month(dc.dateDelivrance)as mois,
					year(dc.dateDelivrance) as an 
					FROM documentCollected dc
					join pole p on dc.idPole = p.id
					join dossierDemande dd on dc.idDossierDemande = dd.id                                        			
					join formeJuridique f on dd.idFormeJuridique = f.id
					join formeJuridiqueTraduction ft on ft.idFormeJuridique = f.id and ft.idLangue=1
					where idStatutTraitement = 2 and UPPER(p.sigle) = "GF" ';


        if ($dateDebut != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) >= "' . date("Y-m-d", strtotime($dateDebut)) . '"';
        }

        if ($dateFin != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) <= "' . date("Y-m-d", strtotime($dateFin)) . '"';
        }

        if ($formeJuridique == 'EI') {
            $sqlQuery = $sqlQuery . ' and upper(f.sigle) = "EI" ';
        }

        if ($formeJuridique == 'SARL/SARLU') {
            $sqlQuery = $sqlQuery . ' and (upper(f.sigle) = "SARL" or upper(f.sigle) = "SARLU") ';
        }

        if ($formeJuridique == 'AUTRE') {
            $sqlQuery = $sqlQuery . ' and upper(f.sigle) != "EI" and upper(f.sigle) != "SARL" and upper(f.sigle) != "SARLU" ';
        }


        $sqlQuery = $sqlQuery . ' group by year(dc.dateDelivrance), month(dc.dateDelivrance) ';


        $sqlQuery = $sqlQuery . ' order by dc.dateDelivrance asc';

        $stmt = $this->getEntityManager()->getConnection()->prepare($sqlQuery);
        $stmt->execute();

        $results = $stmt->fetchAll();

        //die(dump($results));
        $tabResult = array();
        $i = 0;

        foreach ($plageDate as $dateCreation) {
            $j = 0;
            if ($results != array()) {
                foreach ($results as $result) {
                    if (substr($dateCreation, 3, 7) == sprintf("%02d", $result['mois']) . '-' . $result['an']) {
                        $tabResult[$i][0] = sprintf("%02d", $result['jours']);
                        $tabResult[$i][1] = sprintf("%02d", $result['mois']);
                        $tabResult[$i][2] = $result['an'];
                        $tabResult[$i][3] = intval($result['nbr']);
                        break;
                    } else {
                        $tabResult[$i][0] = substr($dateCreation, 0, 2);
                        $tabResult[$i][1] = substr($dateCreation, 3, 2);
                        $tabResult[$i][2] = substr($dateCreation, 6, 4);
                        $tabResult[$i][3] = 0;
                    }

                    $j++;
                }
                $i++;
            } else {
                $tabResult[$i][0] = substr($dateCreation, 0, 2);
                $tabResult[$i][1] = substr($dateCreation, 3, 2);
                $tabResult[$i][2] = substr($dateCreation, 6, 4);
                $tabResult[$i][3] = 0;
                $i++;
            }
        }


        return $tabResult;
    }
    public function listeNbEntrepriseNotaireParFormeJuriqueGrapheAnnuel($dateDebut, $dateFin, $idLangue, $formeJuridique, $plageDate = null)
    {
        $sqlQuery = 'SELECT distinct count(*) as nbr, ft.libelle as formeJuridique, day(dc.dateDelivrance) as jours,  month(dc.dateDelivrance)as mois,
					year(dc.dateDelivrance) as an 
					FROM documentCollected dc
					join pole p on dc.idPole = p.id
					join dossierDemande dd on dc.idDossierDemande = dd.id                                        			
					join formeJuridique f on dd.idFormeJuridique = f.id
					join formeJuridiqueTraduction ft on ft.idFormeJuridique = f.id and ft.idLangue=1
					where idStatutTraitement = 2 and UPPER(p.sigle) = "GF" and dd.idTypeDossier = 7 ';


        if ($dateDebut != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) >= "' . date("Y-m-d", strtotime($dateDebut)) . '"';
        }

        if ($dateFin != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) <= "' . date("Y-m-d", strtotime($dateFin)) . '"';
        }

        if ($formeJuridique == 'EI') {
            $sqlQuery = $sqlQuery . ' and upper(f.sigle) = "EI" ';
        }

        if ($formeJuridique == 'SARL/SARLU') {
            $sqlQuery = $sqlQuery . ' and (upper(f.sigle) = "SARL" or upper(f.sigle) = "SARLU") ';
        }

        if ($formeJuridique == 'AUTRE') {
            $sqlQuery = $sqlQuery . ' and upper(f.sigle) != "EI" and upper(f.sigle) != "SARL" and upper(f.sigle) != "SARLU" ';
        }


        $sqlQuery = $sqlQuery . ' group by year(dc.dateDelivrance), month(dc.dateDelivrance) ';


        $sqlQuery = $sqlQuery . ' order by dc.dateDelivrance asc';

        $stmt = $this->getEntityManager()->getConnection()->prepare($sqlQuery);
        $stmt->execute();

        $results = $stmt->fetchAll();

        //die(dump($results));
        $tabResult = array();
        $i = 0;

        foreach ($plageDate as $dateCreation) {
            $j = 0;
            if ($results != array()) {
                foreach ($results as $result) {
                    if (substr($dateCreation, 3, 7) == sprintf("%02d", $result['mois']) . '-' . $result['an']) {
                        $tabResult[$i][0] = sprintf("%02d", $result['jours']);
                        $tabResult[$i][1] = sprintf("%02d", $result['mois']);
                        $tabResult[$i][2] = $result['an'];
                        $tabResult[$i][3] = intval($result['nbr']);
                        break;
                    } else {
                        $tabResult[$i][0] = substr($dateCreation, 0, 2);
                        $tabResult[$i][1] = substr($dateCreation, 3, 2);
                        $tabResult[$i][2] = substr($dateCreation, 6, 4);
                        $tabResult[$i][3] = 0;
                    }

                    $j++;
                }
                $i++;
            } else {
                $tabResult[$i][0] = substr($dateCreation, 0, 2);
                $tabResult[$i][1] = substr($dateCreation, 3, 2);
                $tabResult[$i][2] = substr($dateCreation, 6, 4);
                $tabResult[$i][3] = 0;
                $i++;
            }
        }


        return $tabResult;
    }
    public function listEntrepriseParContinentExcel($dateDebut, $dateFin)
    {
        $sqlQuery = 'SELECT distinct count(*) as nbr, co.nom as continent
					FROM documentCollected dc
					join pole p on dc.idPole = p.id
					join dossierDemande dd on dc.idDossierDemande = dd.id
					join representant rep on rep.id= (select id from representant where iddossierDemande=dd.id limit 1)
					join pays pa on rep.idPays = pa.id
					join continent co on pa.idContinent = co.id
					where idStatutTraitement = 2 and UPPER(p.sigle) = "GF" ';


        if ($dateDebut != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) >= "' . date("Y-m-d", strtotime($dateDebut)) . '"';
        }

        if ($dateFin != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) <= "' . date("Y-m-d", strtotime($dateFin)) . '"';
        }

        $sqlQuery = $sqlQuery . ' group by continent';


        $stmt = $this->getEntityManager()->getConnection()->prepare($sqlQuery);
        $stmt->execute();

        $results = $stmt->fetchAll();
        //die(dump($results));
        $tabResult = array();

        $i = 0;
        foreach ($results as $result) {
            $tabResult[$i][0] = $result['continent'];
            $tabResult[$i][1] = intval($result['nbr']);
            $i++;
        }


        return $tabResult;
    }
    public function listEntrepriseParContinentGraphe($dateDebut, $dateFin)
    {
        $sqlQuery = 'SELECT distinct count(*) as nbr, co.nom as continent
					FROM documentCollected dc
					join pole p on dc.idPole = p.id
					join dossierDemande dd on dc.idDossierDemande = dd.id
					join representant rep on rep.id= (select id from representant where iddossierDemande=dd.id limit 1)
					join pays pa on rep.idPays = pa.id
					join continent co on pa.idContinent = co.id
					where idStatutTraitement = 2 and UPPER(p.sigle) = "GF" ';

        if ($dateDebut != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) >= "' . date("Y-m-d", strtotime($dateDebut)) . '"';
        }

        if ($dateFin != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) <= "' . date("Y-m-d", strtotime($dateFin)) . '"';
        }

        $sqlQuery = $sqlQuery . '  group by continent';


        $stmt = $this->getEntityManager()->getConnection()->prepare($sqlQuery);
        $stmt->execute();

        $results = $stmt->fetchAll();
        $tabResult = array();

        $plageContinent = array("afrique", "amerique", "asie", "europe", "oceanie");

        $i = 0;
        foreach ($plageContinent as $continent) {
            $j = 0;
            if ($results != array()) {
                foreach ($results as $result) {
                    if (($continent == $result['continent'])) {
                        $tabResult[$i][0] = $result['continent'];
                        $tabResult[$i][1] = intval($result['nbr']);
                        break;
                    } else {
                        $tabResult[$i][0] = $continent;
                        $tabResult[$i][1] = 0;
                    }
                    $j++;
                }
                $i++;
            } else {
                $tabResult[$i][0] = $continent;
                $tabResult[$i][1] = 0;
                $i++;
            }
        }

        return $tabResult;
    }
    public function listEntrepriseParOrigineGraphe($dateDebut, $dateFin)
    {
        $sqlQuery = "SELECT distinct count(*) as nbr, 'guinée' as continent
					FROM documentCollected dc
					join pole p on dc.idPole = p.id
					join dossierDemande dd on dc.idDossierDemande = dd.id
					join representant rep on rep.id= (select id from representant where iddossierDemande=dd.id limit 1)
					join pays pa on rep.idPays = pa.id 
					where idStatutTraitement = 2 and pa.code = 'GN' and UPPER(p.sigle) = 'GF' ";

        if ($dateDebut != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) >= "' . date("Y-m-d", strtotime($dateDebut)) . '"';
        }

        if ($dateFin != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) <= "' . date("Y-m-d", strtotime($dateFin)) . '"';
        }

        $sqlQuery = $sqlQuery . " union
					SELECT distinct count(*) as nbr, co.nom as continent
					FROM documentCollected dc
					join pole p on dc.idPole = p.id
					join dossierDemande dd on dc.idDossierDemande = dd.id
					join representant rep on rep.id= (select id from representant where iddossierDemande=dd.id limit 1)
					join pays pa on rep.idPays = pa.id
					join continent co on pa.idContinent = co.id
					where idStatutTraitement = 2 and pa.code != 'GN' and UPPER(p.sigle) = 'GF' ";

        if ($dateDebut != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) >= "' . date("Y-m-d", strtotime($dateDebut)) . '"';
        }

        if ($dateFin != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) <= "' . date("Y-m-d", strtotime($dateFin)) . '"';
        }

        $sqlQuery = $sqlQuery . '  group by continent';


        $stmt = $this->getEntityManager()->getConnection()->prepare($sqlQuery);
        $stmt->execute();

        $results = $stmt->fetchAll();
        $tabResult = array();

        $plageContinent = array("guinée", "afrique", "amerique", "asie", "europe", "oceanie");

        $i = 0;
        foreach ($plageContinent as $continent) {
            $j = 0;
            if ($results != array()) {
                foreach ($results as $result) {
                    if (($continent == $result['continent'])) {
                        $tabResult[$i][0] = $result['continent'];
                        $tabResult[$i][1] = intval($result['nbr']);
                        break;
                    } else {
                        $tabResult[$i][0] = $continent;
                        $tabResult[$i][1] = 0;
                    }
                    $j++;
                }
                $i++;
            } else {
                $tabResult[$i][0] = $continent;
                $tabResult[$i][1] = 0;
                $i++;
            }
        }

        return $tabResult;
    }
    public function listEntrepriseParOrigineCNSSGraphe($dateDebut, $dateFin)
    {
        $sqlQuery = "SELECT distinct count(*) as nbr, 'guinée' as continent
					FROM documentCollected dc
					join pole p on dc.idPole = p.id
					join dossierDemande dd on dc.idDossierDemande = dd.id
					join representant rep on rep.id= (select id from representant where iddossierDemande=dd.id limit 1)
					join pays pa on rep.idPays = pa.id 
					where idStatutTraitement = 2 and pa.code = 'GN' and UPPER(p.sigle) = 'CNSS' ";

        if ($dateDebut != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) >= "' . date("Y-m-d", strtotime($dateDebut)) . '"';
        }

        if ($dateFin != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) <= "' . date("Y-m-d", strtotime($dateFin)) . '"';
        }

        $sqlQuery = $sqlQuery . " union
					SELECT distinct count(*) as nbr, co.nom as continent
					FROM documentCollected dc
					join pole p on dc.idPole = p.id
					join dossierDemande dd on dc.idDossierDemande = dd.id
					join representant rep on rep.id= (select id from representant where iddossierDemande=dd.id limit 1)
					join pays pa on rep.idPays = pa.id
					join continent co on pa.idContinent = co.id
					where idStatutTraitement = 2 and pa.code != 'GN' and UPPER(p.sigle) = 'CNSS' ";

        if ($dateDebut != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) >= "' . date("Y-m-d", strtotime($dateDebut)) . '"';
        }

        if ($dateFin != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) <= "' . date("Y-m-d", strtotime($dateFin)) . '"';
        }

        $sqlQuery = $sqlQuery . '  group by continent';


        $stmt = $this->getEntityManager()->getConnection()->prepare($sqlQuery);
        $stmt->execute();

        $results = $stmt->fetchAll();
        $tabResult = array();

        $plageContinent = array("guinée", "afrique", "amerique", "asie", "europe", "oceanie");

        $i = 0;
        foreach ($plageContinent as $continent) {
            $j = 0;
            if ($results != array()) {
                foreach ($results as $result) {
                    if (($continent == $result['continent'])) {
                        $tabResult[$i][0] = $result['continent'];
                        $tabResult[$i][1] = intval($result['nbr']);
                        break;
                    } else {
                        $tabResult[$i][0] = $continent;
                        $tabResult[$i][1] = 0;
                    }
                    $j++;
                }
                $i++;
            } else {
                $tabResult[$i][0] = $continent;
                $tabResult[$i][1] = 0;
                $i++;
            }
        }

        return $tabResult;
    }
    public function listEntrepriseParPays($dateDebut, $dateFin, $idLangue, $codeContinent = "ALL")
    {

        $parameters['idLangue'] = $idLangue;

        if ($codeContinent === "ALL") {
            //tous les pays
            $sqlQuery = 'SELECT distinct count(*) as nbr, pat.libelle as pays
				FROM documentCollected dc
				join pole p on dc.idPole = p.id
				join dossierDemande dd on dc.idDossierDemande = dd.id
				join representant rep  on rep.id= (select id from representant where iddossierDemande=dd.id limit 1)
				join pays pa on rep.idPays = pa.id
				join paysTraduction pat on pat.idPays = pa.id and pat.idLangue = :idLangue
				where idStatutTraitement = 2 and UPPER(p.sigle) = "GF" ';
        } else if ($codeContinent === "ASG") {
            //pays d'Afrique sans la guinee
            $sqlQuery = 'SELECT distinct count(*) as nbr, pat.libelle as pays
				FROM documentCollected dc
				join pole p on dc.idPole = p.id
				join dossierDemande dd on dc.idDossierDemande = dd.id
				join representant rep  on rep.id= (select id from representant where iddossierDemande=dd.id limit 1)
				join pays pa on rep.idPays = pa.id
				join paysTraduction pat on pat.idPays = pa.id and pat.idLangue = 1
				join continent co on pa.idContinent = co.id 
				where idStatutTraitement = 2 and UPPER(p.sigle) = "GF"  
				and co.code = "AF" and pa.code != "GN" ';
        } else {
            //par continent choisi
            $sqlQuery = 'SELECT distinct count(*) as nbr, pat.libelle as pays
				FROM documentCollected dc
				join pole p on dc.idPole = p.id
				join dossierDemande dd on dc.idDossierDemande = dd.id
				join representant rep  on rep.id= (select id from representant where iddossierDemande=dd.id limit 1)
				join pays pa on rep.idPays = pa.id
				join paysTraduction pat on pat.idPays = pa.id and pat.idLangue = :idLangue
				join continent co on pa.idContinent = co.id 
				where idStatutTraitement = 2 and UPPER(p.sigle) = "GF" 
				and co.code = :codeContinent ';

            $parameters['codeContinent'] = $codeContinent;
        }


        if ($dateDebut != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) >= "' . date("Y-m-d", strtotime($dateDebut)) . '"';
        }

        if ($dateFin != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) <= "' . date("Y-m-d", strtotime($dateFin)) . '"';
        }

        $sqlQuery = $sqlQuery . ' group by pays';


        $stmt = $this->getEntityManager()->getConnection()->prepare($sqlQuery);
        $stmt->execute($parameters);

        $stmt->execute();

        $results = $stmt->fetchAll();
        //die(dump($results));
        $tabResult = array();

        $i = 0;
        foreach ($results as $result) {
            $tabResult[$i][0] = $result['pays'];
            $tabResult[$i][1] = intval($result['nbr']);
            $i++;
        }


        return $tabResult;
    }
    public function listEntrepriseParPaysCNSS($dateDebut, $dateFin, $idLangue, $codeContinent = "ALL")
    {

        $parameters['idLangue'] = $idLangue;

        if ($codeContinent === "ALL") {
            //tous les pays
            $sqlQuery = 'SELECT distinct count(*) as nbr, pat.libelle as pays
				FROM documentCollected dc
				join pole p on dc.idPole = p.id
				join dossierDemande dd on dc.idDossierDemande = dd.id
				join representant rep  on rep.id= (select id from representant where iddossierDemande=dd.id limit 1)
				join pays pa on rep.idPays = pa.id
				join paysTraduction pat on pat.idPays = pa.id and pat.idLangue = :idLangue
				where idStatutTraitement = 2 and UPPER(p.sigle) = "CNSS" ';
        } else if ($codeContinent === "ASG") {
            //pays d'Afrique sans la guinee
            $sqlQuery = 'SELECT distinct count(*) as nbr, pat.libelle as pays
				FROM documentCollected dc
				join pole p on dc.idPole = p.id
				join dossierDemande dd on dc.idDossierDemande = dd.id
				join representant rep  on rep.id= (select id from representant where iddossierDemande=dd.id limit 1)
				join pays pa on rep.idPays = pa.id
				join paysTraduction pat on pat.idPays = pa.id and pat.idLangue = 1
				join continent co on pa.idContinent = co.id 
				where idStatutTraitement = 2 and UPPER(p.sigle) = "CNSS"  
				and co.code = "AF" and pa.code != "GN" ';
        } else {
            //par continent choisi
            $sqlQuery = 'SELECT distinct count(*) as nbr, pat.libelle as pays
				FROM documentCollected dc
				join pole p on dc.idPole = p.id
				join dossierDemande dd on dc.idDossierDemande = dd.id
				join representant rep  on rep.id= (select id from representant where iddossierDemande=dd.id limit 1)
				join pays pa on rep.idPays = pa.id
				join paysTraduction pat on pat.idPays = pa.id and pat.idLangue = :idLangue
				join continent co on pa.idContinent = co.id 
				where idStatutTraitement = 2 and UPPER(p.sigle) = "CNSS" 
				and co.code = :codeContinent ';

            $parameters['codeContinent'] = $codeContinent;
        }


        if ($dateDebut != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) >= "' . date("Y-m-d", strtotime($dateDebut)) . '"';
        }

        if ($dateFin != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) <= "' . date("Y-m-d", strtotime($dateFin)) . '"';
        }

        $sqlQuery = $sqlQuery . ' group by pays';


        $stmt = $this->getEntityManager()->getConnection()->prepare($sqlQuery);
        $stmt->execute($parameters);

        $stmt->execute();

        $results = $stmt->fetchAll();
        //die(dump($results));
        $tabResult = array();

        $i = 0;
        foreach ($results as $result) {
            $tabResult[$i][0] = $result['pays'];
            $tabResult[$i][1] = intval($result['nbr']);
            $i++;
        }


        return $tabResult;
    }
    public function listEntrepriseParSecteurActivite($dateDebut, $dateFin, $idLangue)
    {
        $sqlQuery = 'SELECT distinct count(*) as nbr, st.libelle as secteurActivite
					FROM documentCollected dc
					join pole p on dc.idPole = p.id
					join dossierDemande dd on dc.idDossierDemande = dd.id
					join secteurActivite s on dd.idSecteurActivite = s.id
					join secteurActiviteTraduction st on st.idSecteurActivite = s.id and st.idLangue = :idLangue
					where idStatutTraitement = 2 and UPPER(p.sigle) = "GF" ';

        if ($dateDebut != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) >= "' . date("Y-m-d", strtotime($dateDebut)) . '"';
        }

        if ($dateFin != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) <= "' . date("Y-m-d", strtotime($dateFin)) . '"';
        }

        $sqlQuery = $sqlQuery . ' group by secteurActivite';


        $stmt = $this->getEntityManager()->getConnection()->prepare($sqlQuery);
        $stmt->bindParam(':idLangue', $idLangue);
        $stmt->execute();

        $results = $stmt->fetchAll();
        //die(dump($results));
        $tabResult = array();

        $i = 0;
        foreach ($results as $result) {
            $tabResult[$i][0] = $result['secteurActivite'];
            $tabResult[$i][1] = intval($result['nbr']);
            $i++;
        }


        return $tabResult;
    }
    public function listEntrepriseParCategorieActivite($dateDebut, $dateFin, $idLangue)
    {
        $sqlQuery = 'SELECT distinct count(*) as nbr, ct.libelle as categorieActivite
					FROM documentCollected dc
					join pole p on dc.idPole = p.id
					join dossierDemande dd on dc.idDossierDemande = dd.id
					join secteurActivite s on dd.idSecteurActivite = s.id
					join categorieActivite c on s.idCategorieActivite = c.id
					join categorieActiviteTraduction ct on ct.idCategorieActivite = c.id and ct.idLangue = :idLangue 
					where idStatutTraitement = 2 and UPPER(p.sigle) = "GF" ';

        if ($dateDebut != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) >= "' . date("Y-m-d", strtotime($dateDebut)) . '"';
        }

        if ($dateFin != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) <= "' . date("Y-m-d", strtotime($dateFin)) . '"';
        }

        $sqlQuery = $sqlQuery . ' group by categorieActivite';


        $stmt = $this->getEntityManager()->getConnection()->prepare($sqlQuery);
        $stmt->bindParam(':idLangue', $idLangue);
        $stmt->execute();

        $results = $stmt->fetchAll();
        //die(dump($results));
        $tabResult = array();

        $i = 0;
        foreach ($results as $result) {
            $tabResult[$i][0] = $result['categorieActivite'];
            $tabResult[$i][1] = intval($result['nbr']);
            $i++;
        }


        return $tabResult;
    }
    public function listEntrepriseParCategorieActiviteCNSS($dateDebut, $dateFin, $idLangue)
    {
        $sqlQuery = 'SELECT distinct count(*) as nbr, ct.libelle as categorieActivite
					FROM documentCollected dc
					join pole p on dc.idPole = p.id
					join dossierDemande dd on dc.idDossierDemande = dd.id
					join secteurActivite s on dd.idSecteurActivite = s.id
					join categorieActivite c on s.idCategorieActivite = c.id
					join categorieActiviteTraduction ct on ct.idCategorieActivite = c.id and ct.idLangue = :idLangue 
					where idStatutTraitement = 2 and UPPER(p.sigle) = "CNSS" ';

        if ($dateDebut != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) >= "' . date("Y-m-d", strtotime($dateDebut)) . '"';
        }

        if ($dateFin != '') {
            $sqlQuery = $sqlQuery . ' and  DATE(dc.dateDelivrance) <= "' . date("Y-m-d", strtotime($dateFin)) . '"';
        }

        $sqlQuery = $sqlQuery . ' group by categorieActivite';


        $stmt = $this->getEntityManager()->getConnection()->prepare($sqlQuery);
        $stmt->bindParam(':idLangue', $idLangue);
        $stmt->execute();

        $results = $stmt->fetchAll();
        //die(dump($results));
        $tabResult = array();

        $i = 0;
        foreach ($results as $result) {
            $tabResult[$i][0] = $result['categorieActivite'];
            $tabResult[$i][1] = intval($result['nbr']);
            $i++;
        }


        return $tabResult;
    }
    public function findDossierBrouillon($user)
    {
        $query = $this->createQueryBuilder('d')
            ->where('d.statut is null and (d.utilisateur=:user)')
            ->setParameters(array('user' => $user));
        $result = $query->getQuery()->getResult();
        //die(dump($result));
        return $query->getQuery()->getResult();
    }
    public function findDossierSuivi($user)
    {
        $query = $this->createQueryBuilder('d')
            ->where('d.statut is not null and d.statut!=-2 and (d.utilisateur=:user)')
            ->setParameters(array('user' => $user));
        return $query->getQuery()->getResult();
    }
    public function findDossiersHelphDeskSuiviByParametres($data, $idLangue, $lieu, $isSiege, $limit = null)
    {
        $query = $this->createQueryBuilder('d')
            ->leftJoin('d.utilisateur', 'u');

        if ($isSiege) {
            $query->leftJoin('u.entreprise', 'e')->join('e.pole', 'p')
                ->where('p.isCreateur=true'); //->andWhere('e.sousPrefecture=:lieu')
            //->setParameters(array('sgleAPIP'=>"APIP",'sgleNT'=>"NT"));

            if ($data['structure'] != '') {

                $query->andWhere('e.id = :idE')
                    ->setParameter('idE', $data['structure']);
            }
        } else {
            $query->leftJoin('u.entreprise', 'e')->andWhere('e.id = :idE')
                ->setParameter('idE', $lieu);
        }


        if ($data['statusRetrait'] != '') {
            $query->andWhere('d.statusRetrait = :statusRetrait')
                ->setParameter('statusRetrait', $data['statusRetrait']);
        }


        if ($data['numeroDossier'] != '') {
            $query->andWhere('LOWER(d.numeroDossier) like :numeroDossier')
                ->setParameter('numeroDossier', '%' . $data['numeroDossier'] . '%');
        }

        if ($data['denominationSociale'] != '') {
            $query->andWhere('LOWER(d.denominationSociale) like :denominationSociale')
                ->setParameter('denominationSociale', '%' . $data['denominationSociale'] . '%');
        }

        if ($data['statut'] != '') {
            $query->andWhere('d.statut = :st')
                ->setParameter('st', $data['statut']);
        }

        if ($data['dateCreationDebut'] != '') {
            $query->andWhere('DATE_DIFF(d.dateCreation,:dateCreationDebut)>=0')
                ->setParameter('dateCreationDebut', new DateTime($data['dateCreationDebut']));
        }

        if ($data['dateCreationFin'] != '') {
            $query->andWhere('DATE_DIFF(d.dateCreation,:dateCreationFin)<=0')
                ->setParameter('dateCreationFin', new DateTime($data['dateCreationFin']));
        }

        if ($data['dateDelivranceDebut'] != '') {
            $query->andWhere('DATE_DIFF(d.dateDelivrance,:dateDelivranceDebut)>=0')
                ->setParameter('dateDelivranceDebut', new DateTime($data['dateDelivranceDebut']));
        }

        if ($data['dateDelivranceFin'] != '') {
            $query->andWhere('DATE_DIFF(d.dateDelivrance,:dateDelivranceFin)<=0')
                ->setParameter('dateDelivranceFin', new DateTime($data['dateDelivranceFin']));
        }


        if ($data['formeJuridique'] != '') {
            $query->andWhere('d.formeJuridique = :formeJuridique')
                ->setParameter('formeJuridique', $data['formeJuridique']);
        }
        if ($data['typeDossier'] != '') {
            $query->andWhere('d.typeDossier = :tpd')
                ->setParameter('tpd', $data['typeDossier']);
        }

        $query->andWhere('d.statut <> :stDefault')->andWhere('d.statut is not null')->setParameter('stDefault', -1);
        if ($limit) {
            $query->setMaxResults($limit);
        }
        $query->orderBy('d.id', 'desc');
        $results = $query->getQuery()->getResult();
        $tabResult = array();
        $i = 0;
        foreach ($results as $result) {
            $tabResult[$i]['id'] = $result->getId();
            $formJ = $result->getFormeJuridique();
            $idf = $formJ->getId();
            $tabResult[$i]['idFormeJ'] = $idf;
            $formJTrad = $this->getEntityManager()->getRepository('BanquemondialeBundle:FormeJuridiqueTraduction')->getLibelleFormeJuridiqueByLanque($idLangue, $idf);
            ($formJTrad) ? $tabResult[$i]['libelleFormeJ'] = $formJTrad->getLibelle() : $tabResult[$i]['libelleFormeJ'] = "";
            $idTyp = $result->getTypeOperation()->getId();
            $tabResult[$i]['idTypeOp'] = $idTyp;
            $typeOpTrad = $this->getEntityManager()->getRepository('BanquemondialeBundle:TypeOperationTraduction')->getLibelleOperationByLanque($idLangue, $idTyp);
            ($typeOpTrad) ? $tabResult[$i]['libelleTypeOp'] = $typeOpTrad->getLibelle() : $tabResult[$i]['libelleTypeOp'] = "";


            $tabResult[$i]['numeroDossier'] = $result->getNumeroDossier();
            $tabResult[$i]['denominationSociale'] = $result->getDenominationSociale();
            $tabResult[$i]['nomCommercial'] = $result->getnomCommercial();
            $tabResult[$i]['enseigne'] = $result->getEnseigne();
            $tabResult[$i]['telephone'] = $result->getTelephone();
            $tabResult[$i]['email'] = $result->getEmail();
            $tabResult[$i]['structure'] = $result->getUtilisateur()->getEntreprise()->getDenomination();
            $tabResult[$i]['region'] = $result->getRegion();
            $tabResult[$i]['dateCreation'] = $result->getDateCreation();
            $tabResult[$i]['dateDelivrance'] = $result->getDateDelivrance();
            $tabResult[$i]['statut'] = $result->getStatut();
            $tabResult[$i]['orange'] = $result->isOrangeCreateur();
            $tabResult[$i]['red'] = $result->isRedCreateur();
            $tabResult[$i]['typeDossier'] = $result->getTypeDossier()->getLibelle();
            $tabResult[$i]['statusRetrait'] = $result->getStatusRetrait();
            $i++;
        }
        return $tabResult;
    }
    public function getNbreDossierHelpDesk($lieu, $isSiege)
    {
        $query = $this->createQueryBuilder('d')->leftJoin('d.utilisateur', 'u')->leftJoin('u.entreprise', 'e');

        if ($isSiege) {
            $query->join('e.pole', 'p')->where('p.isCreateur=true');
        } else {
            $query->andWhere('e.id = :idE')->setParameter('idE', $lieu);
        }

        $query->andWhere('d.statut <> :stDefault')->andWhere('d.statut is not null')->setParameter('stDefault', -1);

        $query->orderBy('d.id', 'desc');
        $results = $query->getQuery()->getResult();
        //die(dump($results));
        return $results;
    }
    public function findLeastLoadedUserSaisi($idEntreprise)
    {
        $sqlQuery = "SELECT u.id, (SELECT count(id) from dossierDemande d where d.idUtilisateur = u.id and (d.statut is null or (d.statut != 2 && d.statut != 1 && d.statut != -2) )) as nbrDossier 
					FROM fos_user u 
					join entreprise e on u.entreprise_id = e.id 
					join profile p on u.profile_id = p.id 
					where e.id = :entreprise and p.description = 'saisi' and u.enabled = 1
					order by nbrDossier ASC Limit 1";
        $parameters['entreprise'] = $idEntreprise;

        $stmt = $this->getEntityManager()->getConnection()->prepare($sqlQuery);
        $stmt->execute($parameters);

        $results = $stmt->fetchAll();

        return $results[0]["id"];
    }
    public function recherNomcommercialUpdate($temoin = false, $motcle)
    {
        $em = $this->getEntityManager()->getConnection();
        if ($temoin == false) {///false pour une recherche like
            $sql = "SELECT d.denominationSociale denominationSociale,f.sigle formeJuridique,rc.numRccmEntreprise rccm, CONCAT(rp.prenom, '   ',rp.nom) gerantPrincipal,se.libelle secteurActivite,d.telephone telephone,d.adresseSiege siegeSocial,(d.dateCreation )anneeCreation
                      FROM 
                      dossierdemande d   RIGHT OUTER     JOIN formejuridique f ON f.id=d.idFormeJuridique
                      LEFT JOIN secteuractivite sa ON sa.id=d.idSecteurActivite
                      LEFT  OUTER JOIN secteuractivitetraduction se ON se.idSecteurActivite=d.idSecteurActivite
                      LEFT   OUTER JOIN rccm rc ON  rc.idDossierDemande=d.id
                       INNER  JOIN representant rp ON rp.idDossierDemande=d.id 
                     WHERE d.denominationSociale   LIKE :denominationSociale  AND se.idLangue=1
                  AND rp.gp=1
                     UNION SELECT a.denominationSociale denominationSociale,a.formeJuridique formeJuridique ,a.rccm rccm,a.gerantPrincipal gerantPrincipal,a.secteurActivite secteurActivite,a.telephone telephone,a.siegeSocial siegeSocial,(a.anneeCreation )anneeCreation
FROM archivenomcommerciaux a 
WHERE a.denominationSociale LIKE :denominationSociale ORDER BY denominationSociale";
            $param = '%' . $motcle . '%';
        } else {///true pour une recherche egalite
            $sql = "SELECT d.denominationSociale denominationSociale,f.sigle formeJuridique,rc.numRccmEntreprise rccm, CONCAT(rp.prenom, '   ',rp.nom) gerantPrincipal,se.libelle secteurActivite,d.telephone telephone,d.adresseSiege siegeSocial,(d.dateCreation )anneeCreation
 FROM 
                      dossierdemande d   RIGHT OUTER     JOIN formejuridique f ON f.id=d.idFormeJuridique
                      LEFT JOIN secteuractivite sa ON sa.id=d.idSecteurActivite
                      LEFT  OUTER JOIN secteuractivitetraduction se ON se.idSecteurActivite=d.idSecteurActivite
                      LEFT   OUTER JOIN rccm rc ON  rc.idDossierDemande=d.id
                       INNER  JOIN representant rp ON rp.idDossierDemande=d.id 
                     WHERE d.denominationSociale  =:denominationSociale  AND se.idLangue=1
                      AND rp.gp=1
                     UNION SELECT a.denominationSociale denominationSociale,a.formeJuridique formeJuridique ,a.rccm rccm,a.gerantPrincipal gerantPrincipal,a.secteurActivite secteurActivite,a.telephone telephone,a.siegeSocial siegeSocial,(a.anneeCreation )anneeCreation
FROM archivenomcommerciaux a 
WHERE a.denominationSociale =:denominationSociale ORDER BY denominationSociale";
            $param = $motcle;
        }
        $statement = $em->prepare($sql);
        $statement->bindValue('denominationSociale', $param);
        $statement->execute();
        $result = $statement->fetchAll();
        return $result;
    }
    public function findDossierEnAttenteSaisiInterfaceDGA($data, $idLangue, $idUser = null, $limit = null)
    {
        $queryattSaisi = $this->_em->createQueryBuilder('s')
            ->addSelect('s')
            ->from('BanquemondialeBundle:dossierdemande', 's')
            ->Join('UtilisateursBundle:Utilisateurs', 'u')
            ->andWhere('s.statut  is  NULL ')
            ->andWhere('u.entreprise=:entreprise')
            ->setParameter('entreprise', 2);
        $ResultqueryattSaisie = count($queryattSaisi->getQuery()->getResult());
        $query = $this->_em->createQueryBuilder('a');
        $query
            ->select('a')
            ->from('BanquemondialeBundle:dossierdemande', 'a')
            ->andWhere('a.statut is NULL ')
            ->orderBy('a.dateCreation', 'desc');

        if (!empty($data)) {
            if ($data['id'] != '') {
                $query->andWhere('LOWER(a.id) = :id')
                    ->setParameter('id', $data['id']);
            }
            if ($data['denominationSociale'] != '') {
                $query->andWhere('LOWER(a.denominationSociale) like :denominationSociale')
                    ->setParameter('denominationSociale', '%' . $data['denominationSociale'] . '%');
            }
            if ($data && array_key_exists('nomCommercial', $data) && $data['nomCommercial'] != '') {
                $query->andWhere('LOWER(a.nomCommercial) like :nomCommercial')
                    ->setParameter('nomCommercial', '%' . $data['nomCommercial'] . '%');
            }
            if ($data['dateCreationDebut'] != '') {
                $query->andWhere('DATE_DIFF(a.dateCreation,:dateCreationDebut)>=0')
                    ->setParameter('dateCreationDebut', new DateTime($data['dateCreationDebut']));
            }
            if ($data['dateCreationFin'] != '') {
                $query->andWhere('DATE_DIFF(a.dateCreation,:dateCreationFin)<=0')
                    ->setParameter('dateCreationFin', new DateTime($data['dateCreationFin']));
            }

            if ($data['formeJuridique'] != '') {
                $query->andWhere('a.formeJuridique = :formeJuridique')
                    ->setParameter('formeJuridique', $data['formeJuridique']);
            }
        }
        if ($limit) {
            $query->setMaxResults($limit);
        }
        $results = $query->getQuery()->getResult();
        $tabResult = array();
        $i = 0;
        foreach ($results as $result) {
            $tabResult[$i]['id'] = $result->getId();
            $formJ = $result->getFormeJuridique();
            $idf = $formJ->getId();
            $tabResult[$i]['idFormeJ'] = $idf;
            $formJTrad = $this->getEntityManager()->getRepository('BanquemondialeBundle:FormeJuridiqueTraduction')->getLibelleFormeJuridiqueByLanque($idLangue, $idf);
            ($formJTrad) ? $tabResult[$i]['libelleFormeJ'] = $formJTrad->getLibelle() : $tabResult[$i]['libelleFormeJ'] = "";

            $idTyp = $result->getTypeOperation()->getId();
            $tabResult[$i]['idTypeOp'] = $idTyp;
            $typeOpTrad = $this->getEntityManager()->getRepository('BanquemondialeBundle:TypeOperationTraduction')->getLibelleOperationByLanque($idLangue, $idTyp);
            ($typeOpTrad) ? $tabResult[$i]['libelleTypeOp'] = $typeOpTrad->getLibelle() : $tabResult[$i]['libelleTypeOp'] = "";

            $agentSaisi = $result->getUtilisateur();
            ($agentSaisi) ? $tabResult[$i]['affectation'] = $agentSaisi->getPrenom() . " " . $agentSaisi->getNom() : $tabResult[$i]['affectation'] = '';
            $tabResult[$i]['denominationSociale'] = $result->getDenominationSociale();
            $tabResult[$i]['nomCommercial'] = $result->getnomCommercial();
            $tabResult[$i]['enseigne'] = $result->getEnseigne();
            $tabResult[$i]['telephone'] = $result->getTelephone();
            $tabResult[$i]['email'] = $result->getEmail();
            //$tabResult[$i]['fax'] = $result->getFax();
            $tabResult[$i]['region'] = $result->getRegion();
            $tabResult[$i]['dateCreation'] = $result->getDateCreation();
            $i++;
        }
        return compact('tabResult', 'ResultqueryattSaisie');
    }
    public function searcheMoveFolder($searche = null)
    {
        $em = $this->getEntityManager()->getConnection();
        $isq = " where d.id=0";
        if (!empty($searche)) {

            $motcle = "'%" . str_replace("'", "\'", $searche) . "%'";
            $isq = " AND   d.denominationSociale LIKE " . $motcle;
        }
        $sql = " SELECT u.username,u.id idUser, d.id,d.idUtilisateur,d.idUserDepot, d.denominationSociale,u.entreprise_id,d.nomCommercial,d.numeroDossier  FROM dossierdemande d  INNER JOIN fos_user u ON u.id=d.idUserDepot AND u.entreprise_id=2 " . $isq;
        try {
            $statement = $em->prepare($sql);
        } catch (DBALException $e) {

        }
        $statement->execute();
        $historique = $statement->fetchAll();
        //die(dump($sql));
        return $historique;
    }
    //////////===========Depot dossier============
    public function getDossierDeposerByPeriode($dateDebut, $dateFin)
    {
            $slqRequete = "SELECT u.username, e.denomination, d.* ,ft.libelle,f.sigle FROM dossierdemande d 
            INNER JOIN formejuridique f ON f.id=d.idFormeJuridique
            INNER JOIN formejuridiquetraduction ft ON ft.idformeJuridique=f.id 
            INNER JOIN fos_user u ON u.id=d.idUserDepot 
            INNER JOIN entreprise e ON e.id=u.entreprise_id
            AND ft.idLangue=1
            AND d.statSuivieDepot=1
            AND CAST(d.dateCreation AS DATE) BETWEEN CAST('$dateDebut' AS DATE ) AND  CAST('$dateFin' AS DATE )
            ORDER BY e.denomination ASC , d.dateCreation DESC ";
        $stmt = $this->getEntityManager()->getConnection()->prepare($slqRequete);
        $stmt->execute();
        $results = $stmt->fetchAll();
        return $results;
    }
    ///////////Quittance dossier============
    public function getQuittancesValiderByPeriode($dateDebut,$dateFin)
    {
        $slqRequete = "SELECT e.denomination, d.*,d.idUtilisateur 'idUserSaisi',d.idUserDepot ,q.idUtilisateur 'UserCaisse' ,ft.libelle,f.sigle FROM dossierdemande d 
            INNER JOIN formejuridique f ON f.id=d.idFormeJuridique
            INNER JOIN formejuridiquetraduction ft ON ft.idformeJuridique=f.id 
            INNER JOIN fos_user u ON u.id=d.idUserDepot 
            INNER JOIN entreprise e ON e.id=u.entreprise_id
            INNER JOIN quittance q ON q.idDossierDemande=d.id
            AND ft.idLangue=1
            AND d.statSuivieDepot=1
            AND d.statSuivieQuittance=1
            AND CAST(d.dateCreation AS DATE) BETWEEN CAST('$dateDebut' AS DATE ) AND  CAST('$dateFin' AS DATE )
            ORDER BY e.denomination ASC , d.dateCreation DESC ";
        $stmt = $this->getEntityManager()->getConnection()->prepare($slqRequete);
        $stmt->execute();
        $results = $stmt->fetchAll();
        return $results;
    }
    public function getQuittancesNonValiderByPeriode($dateDebut,$dateFin)
    {
        $slqRequete = "SELECT e.denomination, d.*,d.idUtilisateur 'idUserSaisi',d.idUserDepot ,q.idUtilisateur 'UserCaisse' ,ft.libelle,f.sigle FROM dossierdemande d 
            INNER JOIN formejuridique f ON f.id=d.idFormeJuridique
            INNER JOIN formejuridiquetraduction ft ON ft.idformeJuridique=f.id 
            INNER JOIN fos_user u ON u.id=d.idUserDepot 
            INNER JOIN entreprise e ON e.id=u.entreprise_id
            INNER JOIN quittance q ON q.idDossierDemande=d.id
            AND ft.idLangue=1
            AND d.statSuivieDepot=1
            AND d.statSuivieQuittance IS NULL 
            AND CAST(d.dateCreation AS DATE) BETWEEN CAST('$dateDebut' AS DATE ) AND  CAST('$dateFin' AS DATE )
            ORDER BY e.denomination ASC , d.dateCreation DESC ";
        $stmt = $this->getEntityManager()->getConnection()->prepare($slqRequete);
        $stmt->execute();
        $results = $stmt->fetchAll();
        return $results;
    }
    ///============Saisie dossier ==========
    public function getDossierNonEncoreSaisieByPeriode($dateDebut, $dateFin)
    {
        $slqRequete = "SELECT e.denomination, d.*,d.idUtilisateur 'idUserSaisi',d.idUserDepot ,ft.libelle,f.sigle FROM dossierdemande d 
            INNER JOIN formejuridique f ON f.id=d.idFormeJuridique
            INNER JOIN formejuridiquetraduction ft ON ft.idformeJuridique=f.id 
            INNER JOIN fos_user u ON u.id=d.idUserDepot 
            INNER JOIN entreprise e ON e.id=u.entreprise_id
            AND ft.idLangue=1
            AND d.statSuivieDepot=1
            AND d.statSuivieQuittance=1
            AND d.statSuivieSaisie  IS NULL 
            AND CAST(d.dateCreation AS DATE) BETWEEN CAST('$dateDebut' AS DATE ) AND  CAST('$dateFin' AS DATE )
            ORDER BY e.denomination ASC , d.dateCreation DESC ";
        $stmt = $this->getEntityManager()->getConnection()->prepare($slqRequete);
        $stmt->execute();
        $results = $stmt->fetchAll();
        return $results;
    }
    public function getDossierSaisieByPeriode($dateDebut, $dateFin)
    {
        $slqRequete = "SELECT e.denomination, d.* ,d.idUtilisateur 'idUserSaisi',d.idUserDepot ,q.idUtilisateur 'UserCaisse',ft.libelle,f.sigle FROM dossierdemande d 
            INNER JOIN formejuridique f ON f.id=d.idFormeJuridique
            INNER JOIN formejuridiquetraduction ft ON ft.idformeJuridique=f.id 
            INNER JOIN fos_user u ON u.id=d.idUserDepot 
            INNER JOIN entreprise e ON e.id=u.entreprise_id
            INNER JOIN quittance q ON q.idDossierDemande=d.id
            AND ft.idLangue=1
            AND d.statSuivieDepot=1
            AND d.statSuivieQuittance=1
            AND d.statSuivieSaisie=1 
            AND CAST(d.dateCreation AS DATE) BETWEEN CAST('$dateDebut' AS DATE ) AND  CAST('$dateFin' AS DATE )
            ORDER BY e.denomination ASC , d.dateCreation DESC ";
        $stmt = $this->getEntityManager()->getConnection()->prepare($slqRequete);
        $stmt->execute();
        $results = $stmt->fetchAll();
        return $results;
    }
    ///============Dossier immatrucler ==========
    public function getRccmTraiterByPeriode($dateDebut, $dateFin)
    {
        $slqRequete = "SELECT e.denomination, d.* ,d.idUtilisateur 'idUserSaisi',d.idUserDepot ,q.idUtilisateur 'UserCaisse' ,ft.libelle,f.sigle FROM dossierdemande d 
            INNER JOIN formejuridique f ON f.id=d.idFormeJuridique
            INNER JOIN formejuridiquetraduction ft ON ft.idformeJuridique=f.id 
            INNER JOIN fos_user u ON u.id=d.idUserDepot 
            INNER JOIN entreprise e ON e.id=u.entreprise_id
             INNER JOIN quittance q ON q.idDossierDemande=d.id
            AND ft.idLangue=1
            AND d.statSuivieDepot=1
            AND d.statSuivieQuittance=1
            AND d.statSuivieSaisie=1 
            AND d.statSuivieRccm=1
            AND CAST(d.dateCreation AS DATE) BETWEEN CAST('$dateDebut' AS DATE ) AND  CAST('$dateFin' AS DATE )
            ORDER BY e.denomination ASC , d.dateCreation DESC ";
        $stmt = $this->getEntityManager()->getConnection()->prepare($slqRequete);
        $stmt->execute();
        $results = $stmt->fetchAll();
        return $results;
    }
    public function getRccmNonEncoreTraiterByPeriode($dateDebut, $dateFin)
    {
        $slqRequete = "SELECT e.denomination, d.* ,d.idUtilisateur 'idUserSaisi',d.idUserDepot ,q.idUtilisateur 'UserCaisse',ft.libelle,f.sigle FROM dossierdemande d 
            INNER JOIN formejuridique f ON f.id=d.idFormeJuridique
            INNER JOIN formejuridiquetraduction ft ON ft.idformeJuridique=f.id 
            INNER JOIN fos_user u ON u.id=d.idUserDepot 
            INNER JOIN entreprise e ON e.id=u.entreprise_id
             INNER JOIN quittance q ON q.idDossierDemande=d.id
            AND ft.idLangue=1
            AND d.statSuivieDepot=1
            AND d.statSuivieQuittance=1
            AND d.statSuivieSaisie=1 
            AND d.statSuivieRccm is null 
            AND CAST(d.dateCreation AS DATE) BETWEEN CAST('$dateDebut' AS DATE ) AND  CAST('$dateFin' AS DATE )
            ORDER BY e.denomination ASC , d.dateCreation DESC ";
        $stmt = $this->getEntityManager()->getConnection()->prepare($slqRequete);
        $stmt->execute();
        $results = $stmt->fetchAll();
        return $results;
    }

    public function getRapportRccmTraiterByPeriode($dateDebut, $dateFin)
    {
        $slqRequete = "SELECT d.*,ft.libelle,r.numRccmEntreprise,r.date dateImatriculation FROM rccm r
	INNER JOIN dossierdemande d ON d.id=r.idDossierDemande
	INNER JOIN formejuridique f ON f.id=d.idFormeJuridique
	INNER JOIN formejuridiquetraduction ft ON ft.idformeJuridique=f.id 
	AND ft.idLangue=1
            AND CAST(r.date AS DATE) BETWEEN CAST('$dateDebut' AS DATE ) AND  CAST('$dateFin' AS DATE )
            ORDER BY r.date DESC ";
        $stmt = $this->getEntityManager()->getConnection()->prepare($slqRequete);
        $stmt->execute();
        $results = $stmt->fetchAll();
        return $results;
    }

////  Dossier en souffrance===============
    public function getDossierEnsouffranceDNIByPeriode($dateDebut, $dateFin)
    {
        $slq = "-- LISTE DES DOSSIER NON TRANSMIT A LA DNI
SELECT DISTINCT h.codeRetourDNI ,h.DateEnvoiRccm, d.*,ft.libelle FROM dossierdemande d
INNER JOIN historiqueechangedni h ON h.idDossierDemande=d.id
INNER JOIN formejuridique f ON f.id=d.idFormeJuridique
INNER JOIN formejuridiquetraduction ft ON ft.idformeJuridique=f.id 
INNER JOIN fos_user u ON u.id=d.idUserDepot 
INNER JOIN entreprise e ON e.id=u.entreprise_id
WHERE d.statSuivieDepot=1
            AND d.statSuivieQuittance=1
            AND d.statSuivieSaisie=1 
            AND d.statSuivieRccm=1
             AND h.statut IS NULL 
AND h.codeRetourDNI NOT  IN ('DNI01','DNI04','DNI03') 
AND CAST(d.dateCreation AS DATE) BETWEEN CAST('$dateDebut' AS DATE ) AND  CAST('$dateFin' AS DATE )
-- WHERE d.statSuivieRccm =1
UNION 
-- LISTE DES DOSSIER NON TRANSMIT A LA DNI
SELECT DISTINCT h.codeRetourDNI ,h.DateEnvoiRccm, d.*,ft.libelle FROM dossierdemande d
INNER JOIN historiqueechangedni h ON h.idDossierDemande=d.id
INNER JOIN formejuridique f ON f.id=d.idFormeJuridique
INNER JOIN formejuridiquetraduction ft ON ft.idformeJuridique=f.id 
INNER JOIN fos_user u ON u.id=d.idUserDepot 
INNER JOIN entreprise e ON e.id=u.entreprise_id
WHERE d.statSuivieDepot=1
            AND d.statSuivieQuittance=1
            AND d.statSuivieSaisie=1 
            AND d.statSuivieRccm=1
            AND h.statut IS NULL 
AND h.codeRetourDNI IS NULL 
AND CAST(d.dateCreation AS DATE) BETWEEN CAST('$dateDebut' AS DATE ) AND  CAST('$dateFin' AS DATE )
-- WHERE d.statSuivieRccm =1

";
        $stmt = $this->getEntityManager()->getConnection()->prepare($slq);
        $results= $stmt->execute();
        $results = $stmt->fetchAll();
        $dossEnsoufrance=$this->uniqueArray($results,'denominationSociale');
        return $dossEnsoufrance;
    }
////////// Dossier transmit a la DNI
    public function getDossierTransmitDNIByPeriode($dateDebut, $dateFin)
    {
        $slq = "-- LISTE DES DOSSIER  TRANSMIT A LA DNI
            SELECT DISTINCT h.codeRetourDNI ,h.DateEnvoiRccm, d.*,ft.libelle FROM dossierdemande d
            INNER JOIN historiqueechangedni h ON h.idDossierDemande=d.id
            INNER JOIN formejuridique f ON f.id=d.idFormeJuridique
            INNER JOIN formejuridiquetraduction ft ON ft.idformeJuridique=f.id 
            INNER JOIN fos_user u ON u.id=d.idUserDepot 
            INNER JOIN entreprise e ON e.id=u.entreprise_id
            WHERE h.codeRetourDNI IN ('DNI01','DNI04','DNI03') 
            AND d.statSuivieRccm =1
            AND CAST(d.dateCreation AS DATE) BETWEEN CAST('$dateDebut' AS DATE ) AND  CAST('$dateFin' AS DATE )";
        $stmt = $this->getEntityManager()->getConnection()->prepare($slq);
        $results= $stmt->execute();
        $results = $stmt->fetchAll();
        $dossEnsoufrance=$this->uniqueArray($results,'denominationSociale');
        return $dossEnsoufrance;
    }
    ///============Dossier Retirer ==========
    public function getDossierRetirerPeriode($dateDebut, $dateFin)
    {
        $slqRequete = "SELECT e.denomination, d.* ,ft.libelle,f.sigle FROM dossierdemande d 
            INNER JOIN formejuridique f ON f.id=d.idFormeJuridique
            INNER JOIN formejuridiquetraduction ft ON ft.idformeJuridique=f.id 
            INNER JOIN fos_user u ON u.id=d.idUserDepot 
            INNER JOIN entreprise e ON e.id=u.entreprise_id
            INNER JOIN nif n ON n.idDossierDemande=d.id
            WHERE ft.idLangue=1
            AND d.statSuivieDepot=1
            AND d.statSuivieQuittance=1
            AND d.statSuivieSaisie=1 
            AND d.statSuivieRccm=1
            AND d.statusRetrait is not null
            AND d.estRetire=1
            AND CAST(d.dateCreation AS DATE) BETWEEN CAST('$dateDebut' AS DATE ) AND  CAST('$dateFin' AS DATE )
            ORDER BY e.denomination ASC , d.dateCreation DESC ";
        $stmt = $this->getEntityManager()->getConnection()->prepare($slqRequete);
        $stmt->execute();
        $results = $stmt->fetchAll();
        return $results;
    }
    public function getDossierNonEncoreRetirerByPeriode($dateDebut, $dateFin)
    {
        $slqRequete = "SELECT e.denomination, d.* ,ft.libelle,f.sigle FROM dossierdemande d 
            INNER JOIN formejuridique f ON f.id=d.idFormeJuridique
            INNER JOIN formejuridiquetraduction ft ON ft.idformeJuridique=f.id 
            INNER JOIN fos_user u ON u.id=d.idUserDepot 
            INNER JOIN entreprise e ON e.id=u.entreprise_id
            INNER JOIN nif n ON n.idDossierDemande=d.id
            WHERE ft.idLangue=1
            AND d.statSuivieDepot=1
            AND d.statSuivieQuittance=1
            AND d.statSuivieSaisie=1 
            AND d.statSuivieRccm =1 
            AND d.statusRetrait  IS NULL
            AND n.statut=1
            AND CAST(d.dateCreation AS DATE) BETWEEN CAST('$dateDebut' AS DATE ) AND  CAST('$dateFin' AS DATE )
            ORDER BY e.denomination ASC , d.dateCreation DESC ";
        $stmt = $this->getEntityManager()->getConnection()->prepare($slqRequete);
        $stmt->execute();
        $results = $stmt->fetchAll();
        return $results;
    }
    public function getStatistiqueDossierRetirerByAgentPeriode($dateDebut, $dateFin)
    {
        $slqRequete = "SELECT e.denomination, d.* ,ft.libelle,f.sigle FROM dossierdemande d 
            INNER JOIN formejuridique f ON f.id=d.idFormeJuridique
            INNER JOIN formejuridiquetraduction ft ON ft.idformeJuridique=f.id 
            INNER JOIN fos_user u ON u.id=d.idUserDepot 
            INNER JOIN entreprise e ON e.id=u.entreprise_id
            INNER JOIN nif n ON n.idDossierDemande=d.id
            WHERE ft.idLangue=1
            AND d.statSuivieDepot=1
            AND d.statSuivieQuittance=1
            AND d.statSuivieSaisie=1 
            AND d.statSuivieRccm=1
            AND d.statusRetrait is not null
            AND d.estRetire=1
            AND CAST(d.dateRetrait AS DATE) BETWEEN CAST('$dateDebut' AS DATE ) AND  CAST('$dateFin' AS DATE )
            ORDER BY e.denomination ASC , d.dateCreation DESC ";
        $stmt = $this->getEntityManager()->getConnection()->prepare($slqRequete);
        $stmt->execute();
        $results = $stmt->fetchAll();
        return $results;
    }
    public function getRccmLogique($dateDebut, $dateFin)
    {
        $slqRequete = "SELECT e.denomination, d.* ,r.numRccmFormalite,r.date 'dateEnregistrementRccm' ,ft.libelle,f.sigle FROM dossierdemande d 
            INNER JOIN formejuridique f ON f.id=d.idFormeJuridique
            INNER JOIN formejuridiquetraduction ft ON ft.idformeJuridique=f.id 
            INNER JOIN fos_user u ON u.id=d.idUserDepot 
            INNER JOIN entreprise e ON e.id=u.entreprise_id
            INNER JOIN rccm r ON r.idDossierDemande= d.id
            WHERE ft.idLangue=1
            AND d.statSuivieDepot=1
            AND d.statSuivieQuittance=1
            AND d.statSuivieSaisie=1 
            AND d.statSuivieRccm =1
            AND CAST(d.dateCreation AS DATE) BETWEEN CAST('$dateDebut' AS DATE ) AND  CAST('$dateFin' AS DATE )
            ORDER BY e.denomination ASC , d.dateCreation DESC ";
        $stmt = $this->getEntityManager()->getConnection()->prepare($slqRequete);
        $stmt->execute();
        $results = $stmt->fetchAll();
        return $results;
    }
    public function getNifLogique($dateDebut, $dateFin)
    {
        $slqRequete = "SELECT n.numeroIdentificationFiscale, e.denomination, d.* ,n.date 'datenif',ft.libelle,f.sigle FROM dossierdemande d 
            INNER JOIN formejuridique f ON f.id=d.idFormeJuridique
            INNER JOIN formejuridiquetraduction ft ON ft.idformeJuridique=f.id 
            INNER JOIN fos_user u ON u.id=d.idUserDepot 
            INNER JOIN entreprise e ON e.id=u.entreprise_id
           INNER JOIN nif n ON n.idDossierDemande=d.id
            WHERE ft.idLangue=1
            AND d.statSuivieDepot=1
            AND d.statSuivieQuittance=1
            AND d.statSuivieSaisie=1 
            AND d.statSuivieRccm =1
            AND CAST(d.dateCreation AS DATE) BETWEEN CAST('$dateDebut' AS DATE ) AND  CAST('$dateFin' AS DATE )
            ORDER BY e.denomination ASC , d.dateCreation DESC ";
        $stmt = $this->getEntityManager()->getConnection()->prepare($slqRequete);
        $stmt->execute();
        $results = $stmt->fetchAll();
        return $results;
    }
    public function getRccmPhysique($dateDebut, $dateFin)
    {
        $slqRequete = "SELECT e.denomination, d.* ,r.numRccmFormalite,r.date 'dateEnregistrementRccm' ,r.dateObtentionNif,ft.libelle,f.sigle FROM dossierdemande d 
            INNER JOIN formejuridique f ON f.id=d.idFormeJuridique
            INNER JOIN formejuridiquetraduction ft ON ft.idformeJuridique=f.id 
            INNER JOIN fos_user u ON u.id=d.idUserDepot 
            INNER JOIN entreprise e ON e.id=u.entreprise_id
            INNER JOIN rccm r ON r.idDossierDemande= d.id
            where ft.idLangue=1
            AND d.statSuivieDepot=1
            AND d.statSuivieQuittance=1
            AND d.statSuivieSaisie=1 
            AND d.statSuivieRccm =1
             AND r.statut=1
            AND CAST(d.dateCreation AS DATE) BETWEEN CAST('$dateDebut' AS DATE ) AND  CAST('$dateFin' AS DATE )
            ORDER BY e.denomination ASC , d.dateCreation DESC ";
        $stmt = $this->getEntityManager()->getConnection()->prepare($slqRequete);
        $stmt->execute();
        $results = $stmt->fetchAll();
       // die(dump($slqRequete));
        return $results;
    }
    public function getNifPhysique($dateDebut, $dateFin)
    {
        $slqRequete = "SELECT e.denomination, d.*,n.date 'datenif', n.numeroIdentificationFiscale,n.dateObtentionNif,ft.libelle,f.sigle FROM dossierdemande d 
            INNER JOIN formejuridique f ON f.id=d.idFormeJuridique
            INNER JOIN formejuridiquetraduction ft ON ft.idformeJuridique=f.id 
            INNER JOIN fos_user u ON u.id=d.idUserDepot 
            INNER JOIN entreprise e ON e.id=u.entreprise_id
           INNER JOIN nif n ON n.idDossierDemande=d.id
            where ft.idLangue=1
            AND d.statSuivieDepot=1
            AND d.statSuivieQuittance=1
            AND d.statSuivieSaisie=1 
            AND d.statSuivieRccm =1
            AND n.statut=1
            AND CAST(d.dateCreation AS DATE) BETWEEN CAST('$dateDebut' AS DATE ) AND  CAST('$dateFin' AS DATE )
            ORDER BY e.denomination ASC , d.dateCreation DESC ";
        $stmt = $this->getEntityManager()->getConnection()->prepare($slqRequete);
        $stmt->execute();
        $results = $stmt->fetchAll();
        return $results;
    }
    public function getStatistiqueGeneralCircuitDossierBydate($dateDebut, $dateFin)
    {
       // die(dump($this->secondsToTime(1)));
        $slqRequete = "SELECT DISTINCTROW d.id,d.denominationSociale,f.sigle,d.dateCreation,q.datePaiement,d.dateSaisie,
r.date dateGreffe,r.date dateEnvoidni,n.date dateTraitNifLogique
,n.dateObtentionNif dateTraitementNifPhysique,r.date datetratementRccmLogique,
r.dateObtentionNif dateTraitementRccmPhysique,d.dateRetrait, TIMESTAMPDIFF(SECOND,d.dateCreation, d.dateRetrait) AS nb_second
 FROM dossierdemande d 
INNER JOIN formejuridique f ON f.id=d.idFormeJuridique
INNER JOIN fos_user u ON u.id=d.idUserDepot 
INNER JOIN entreprise e ON e.id=u.entreprise_id
LEFT JOIN nif n ON n.idDossierDemande=d.id
LEFT JOIN rccm r ON r.idDossierDemande=d.id
LEFT JOIN quittance q ON q.idDossierDemande=d.id
            WHERE CAST(d.dateCreation AS DATE) BETWEEN CAST('$dateDebut' AS DATE ) AND  CAST('$dateFin' AS DATE )
            ORDER BY d.dateCreation DESC ";
        $stmt = $this->getEntityManager()->getConnection()->prepare($slqRequete);
        $stmt->execute();
        $results = $stmt->fetchAll();
        return $results;
    }
    public function getStatistiqueSuiviDossierParAgentBydate($dateDebut, $dateFin,$choix)
    {
        $slqRequete="SELECT * FROM (SELECT 0 AS num) virtualTable where num=333";
       if    ($choix==1){
           $slqRequete = "SELECT  p.sigle, u.pole_id, u.username, d.idUserDepot , d.idUserDepot userId,
                            u.nom,u.prenom,u.profile_id,COUNT(d.id) nombreDossier,
                            CONCAT(u.nom,' ',u.prenom) AS nomPrenom
                            FROM dossierdemande d 
                            INNER JOIN fos_user u ON u.id=d.idUserDepot
                            INNER JOIN pole p ON p.id=u.pole_id
                            WHERE d.idUserDepot IS NOT NULL AND  CAST(d.dateCreation AS DATE) BETWEEN CAST('$dateDebut' AS DATE ) AND  CAST('$dateFin' AS DATE )
                          AND u.profile_id=1
                            GROUP BY d.idUserDepot ORDER BY nombreDossier desc,nomPrenom";
       }// DEPOT
       elseif($choix==2){
           $slqRequete = "SELECT q.idUtilisateur,COUNT(q.id) nombreDossier,u.username,u.nom,u.prenom,
                                        q.idUtilisateur userId,  
                            CONCAT(u.nom,' ',u.prenom) AS nomPrenom
                            FROM quittance q 
                            INNER JOIN fos_user u ON q.idUtilisateur=u.id
                            WHERE u.profile_id=4 AND  CAST(q.datePaiement AS DATE) BETWEEN CAST('$dateDebut' AS DATE ) AND  CAST('$dateFin' AS DATE )
                            GROUP BY q.idUtilisateur ORDER BY nombreDossier desc,nomPrenom";
       } // CAISSE
       elseif($choix==3){
           $slqRequete = "SELECT  p.sigle, u.pole_id, u.username, d.idUtilisateur ,
                            d.idUtilisateur userId,
                            u.nom,u.prenom,u.profile_id,COUNT(d.id) nombreDossier,
                            CONCAT(u.nom,' ',u.prenom) AS nomPrenom
                            FROM dossierdemande d 
                            INNER JOIN fos_user u ON u.id=d.idUtilisateur
                            INNER JOIN pole p ON p.id=u.pole_id 
                            AND u.profile_id=2 AND  CAST(d.dateSaisie AS DATE) BETWEEN CAST('$dateDebut' AS DATE ) AND  CAST('$dateFin' AS DATE )
                            GROUP BY d.idUtilisateur ORDER BY nombreDossier desc,nomPrenom";
       } ///SAISIE
        $stmt = $this->getEntityManager()->getConnection()->prepare($slqRequete);
        $stmt->execute();
        $results = $stmt->fetchAll();
        return $results;
    }
    public function getDossiersTraiteByAgentByServiceBydate($userId,$service,$dateDebut, $dateFin)
    {
        $slqRequete="SELECT * FROM (SELECT 0 AS num) virtualTable where num=333";
        if    ($service==1){
            $slqRequete = "SELECT d.*,ft.libelle FROM dossierdemande d 
                            INNER JOIN fos_user u ON u.id=d.idUserDepot
                            INNER JOIN formejuridique f ON f.id=d.idFormeJuridique
                            INNER JOIN formejuridiquetraduction ft ON ft.idformeJuridique=f.id       
                            AND d.idUserDepot='$userId'
                            AND ft.idLangue=1
                            AND  CAST(d.dateCreation AS DATE) BETWEEN CAST('$dateDebut' AS DATE ) AND  CAST('$dateFin' AS DATE )
                           ORDER BY dateCreation desc";
        }// DEPOT
        elseif($service==2){
            $slqRequete = "SELECT d.*,q.dateFacturation,q.datePaiement,ft.libelle FROM quittance q
                            INNER JOIN dossierdemande d ON d.id=q.idDossierDemande
                            INNER JOIN fos_user u ON u.id=q.idUtilisateur
                            INNER JOIN formejuridique f ON f.id=d.idFormeJuridique
                            INNER JOIN formejuridiquetraduction ft ON ft.idformeJuridique=f.id
                            AND q.idUtilisateur='$userId' 
                            AND ft.idLangue=1 
                            AND CAST(q.datePaiement AS DATE) BETWEEN CAST('$dateDebut' AS DATE ) AND  CAST('$dateFin' AS DATE )
                            ORDER BY datePaiement desc";
        } // CAISSE
        elseif($service==3){
            $slqRequete = "SELECT d.* ,ft.libelle FROM dossierdemande d 
                INNER JOIN fos_user u ON d.idUtilisateur=u.id
                INNER JOIN formejuridique f ON f.id=d.idFormeJuridique
                INNER JOIN formejuridiquetraduction ft ON ft.idformeJuridique=f.id
                AND d.idUtilisateur ='$userId'
                AND ft.idLangue=1 
                AND  CAST(d.dateSaisie AS DATE) BETWEEN CAST('$dateDebut' AS DATE ) AND  CAST('$dateFin' AS DATE )
             ORDER BY dateSaisie desc";
        } ///SAISIE
        $stmt = $this->getEntityManager()->getConnection()->prepare($slqRequete);
        $stmt->execute();
        $results = $stmt->fetchAll();
        return $results;
    }
    public function findDossierDeposerByAgentByPeriod($dateDebut,$dateFin,$idUser){

        $slqRequete = "SELECT d.*,ft.libelle FROM dossierdemande d 
                        INNER JOIN fos_user u ON u.id=d.idUserDepot
                        INNER JOIN formejuridique f ON f.id=d.idFormeJuridique
                     INNER JOIN formejuridiquetraduction ft ON ft.idformeJuridique=f.id 
                    AND ft.idLangue=1 
                    AND d.idUserDepot=$idUser
                    AND CAST(d.dateCreation AS DATE) BETWEEN CAST('$dateDebut' AS DATE ) AND  CAST('$dateFin' AS DATE )";
        $stmt = $this->getEntityManager()->getConnection()->prepare($slqRequete);
        $stmt->execute();
        $results = $stmt->fetchAll();
        return $results;
    }
    /**
     * @param $array
     * @param $column
     * @return array
     */
    function uniqueArray($array, $column)
    {
        $unique_arr = array_unique(array_column($array, $column));
        return array_values(array_intersect_key($array, $unique_arr));
    }
    //=====Repertoire des entreprise 'Web Services ==============
    public function getRepEntre($rccm)
    {

        $slqRequete = "SELECT d.denominationSociale,d.numeroDossier,d.dateCreation,n.numeroIdentificationFiscale 'nif',r.numRccmFormalite 'rccm' FROM  nif n  INNER JOIN dossierdemande d  ON d.id=n.idDossierDemande
                 INNER JOIN rccm r ON r.idDossierDemande =d.id 
                 WHERE LOWER(REPLACE(r.numRccmFormalite, ' ', '')) LIKE  LOWER(REPLACE('$rccm', ' ',''))";
        $stmt = $this->getEntityManager()->getConnection()->prepare($slqRequete);
        $stmt->execute();
        return $results = $stmt->fetchAll();
    }
}
