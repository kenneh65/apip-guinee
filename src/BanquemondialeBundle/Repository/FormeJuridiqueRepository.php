<?php

namespace BanquemondialeBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * FormeJuridiqueRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FormeJuridiqueRepository extends EntityRepository
{    
    public function count($code) {
        return $this->createQueryBuilder('f')
                ->select('count(f)')
                ->where('f.sigle = :code')				
                ->setParameter('code', $code)
                ->getQuery()
                ->getSingleScalarResult();
    }

    public function getListFormeJuridiqueByCodeLanque($codeLangue) {
        $qb = $this->_em->createQueryBuilder();

           $query= $qb->select('f')
            ->from('BanquemondialeBundle:formejuridique','f')
            ->leftjoin('BanquemondialeBundle:formeJuridiqueTraduction', 'ft','WITH','ft.formeJuridique=f.id')
            ->leftjoin('BanquemondialeBundle:langue', 'l','WITH','ft.langue=l.id')
            ->where("l.id=:codeLangue")
            ->orderBy("f.id","asc")
            ->setParameter('codeLangue', $codeLangue);
           return $query;
//die(dump($query));
//
//
//        $query = $this->createQueryBuilder('f')
//            ->join('f.formeJuridiqueTraduction', 'ft')
//            ->join('ft.langue', 'l');
//        $query->where('l.code = :codeLangue')->setParameter('codeLangue', $codeLangue)
//            ->andWhere('f.actif = true')
//            ->orderBy('ft.libelle', 'asc');
//       // die(dump($query->getQuery()));
//        return $query;
    }
	/*
	public function getSimulationByForme($idFormeJuridique) {
             
		$slqRequete='SELECT c.ordre, p.nom, p.nomFormulaire, (select montant from tarification where idPole= p.id and idFormeJuridique = '. $idFormeJuridique .') as montant FROM formejuridique j join circuit c on c.idFormejuridique = j.id join pole p on c.idPole = p.id
where j.id = '. $idFormeJuridique .' order by c.ordre asc;';		
		
		$stmt = $this->getEntityManager()->getConnection()->prepare($slqRequete);
		$stmt->execute();
		
		$results = $stmt->fetchAll();
        
        return $results;
    }
	*/
	
	
	
}