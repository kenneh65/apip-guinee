<?php

namespace BanquemondialeBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * FormeJuridiqueTraductionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FormeJuridiqueTraductionRepository extends EntityRepository {

    public function getListFormeJuridiqueByLanque($idLangue) {
        $query = $this->createQueryBuilder('f')->join('f.langue', 'l')
                ->join('f.formeJuridique', 'j');
        $query->where('l.id = :idl')->setParameter('idl', $idLangue)
                ->andWhere('j.actif = true')
                ->orderBy('f.libelle', 'asc');
        return $query;
    }

    public function getListFormeJuridiqueByCodeLanque($codeLangue) {
        $query = $this->createQueryBuilder('f')->join('f.langue', 'l')->join('f.formeJuridique', 'j');
        $query->where('l.code = :codeLangue')->setParameter('codeLangue', $codeLangue)
                ->andWhere('j.actif = true')
                ->orderBy('f.libelle', 'asc');
        return $query;
    }

    public function getListFormes($langue) {
        $query = $this->createQueryBuilder('f')->join('f.langue', 'l')->join('f.formeJuridique', 'j');
        $query->where('l.code = :code')->setParameter('code', $langue)
                ->andWhere('j.actif = true');
        return $query;
    }

    public function getLibelleFormeJuridiqueByLanque($idLangue, $idFormeJ) {
        $qb = $this->createQueryBuilder('ft')
                ->leftJoin('ft.formeJuridique', 'f')
                ->join('ft.langue', 'l')
                ->where('l.id = :idl')
                ->andWhere('f.id = :idfj')
                ->andWhere('f.actif = true')
                ->setParameters(array('idl' => $idLangue, 'idfj' => $idFormeJ));
        $query = $qb->getQuery();
        $results = $query->getOneOrNullResult();
        return $results;
    }

    public function getListFormeJuridique($langue) {
        $query = $this->createQueryBuilder('p')->join('p.langue', 'l')->join('f.formeJuridique', 'j');
        $query->where('l.code = :code')->setParameter('code', $langue)
                ->andWhere('j.actif = true');
        return $query;
    }

    public function getTraduction($id, $langue) {
        $qb = $this->createQueryBuilder('f')
                ->join('f.langue', 'l');


        $qb->where('f.formeJuridique = :id and l.code = :langue')
                ->setParameter('id', $id)
                ->setParameter('langue', $langue);

        return $qb->getQuery()->getOneOrNullResult();
    }

    public function getListeFormeJuridiqueByLanque($idLangue, $siglePoleCreateur = null) {
        $query = $this->createQueryBuilder('ft')->join('ft.langue', 'l')
                ->join('ft.formeJuridique', 'f');
        $query->where('l.id = :idl')->setParameter('idl', $idLangue);

        if($siglePoleCreateur && $siglePoleCreateur!="APIP" && $siglePoleCreateur!="NT" ){
            $query->andWhere('f.sigle= :sgle')->setParameter('sgle', "EI");
        }
        $query->andWhere('f.actif = true')
                ->orderBy('ft.libelle', 'asc');
        return $query;
    }

}
