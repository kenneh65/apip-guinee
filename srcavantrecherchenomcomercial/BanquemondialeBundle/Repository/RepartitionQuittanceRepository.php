<?php

namespace BanquemondialeBundle\Repository;

use Doctrine\ORM\EntityRepository;
use \DateTime;

/**
 * RepartitionQuittanceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RepartitionQuittanceRepository extends EntityRepository {

    public function findRepartitionQuittanceByParametres($dateDebut, $dateFin, $entreprise, $idPole = null, $formeJuridique = null) {
        $query = $this->createQueryBuilder('a')
                ->select('IDENTITY(a.pole)', 'SUM(a.montantVerse)')
                ->leftJoin('a.dossierDemande', 'd')
                ->groupBy('a.pole');

		if ($entreprise != '') {
			$query->andWhere('a.entreprise =:entreprise ')
			->setParameter('entreprise', $entreprise);
        }
		
        if ($dateDebut != '') {
            $query->andWhere('DATE_DIFF(a.datePaiement,:dateDebut)>=0')
                    ->setParameter('dateDebut', new DateTime($dateDebut));
        }

        if ($dateFin != '') {
            $query->andWhere('DATE_DIFF(a.datePaiement,:dateFin)<=0')
                    ->setParameter('dateFin', new DateTime($dateFin));
        }

        if (($dateDebut == '') && ($dateFin == '')) {
            $today = date('Y-m-d');
            $query->andWhere('DATE_DIFF(a.datePaiement,:dateFin)<=0')
                    ->setParameter('dateFin', new DateTime($today));
            $query->andWhere('DATE_DIFF(a.datePaiement,:dateDebut)>=0')
                    ->setParameter('dateDebut', new DateTime($today));
        }

        if ($idPole != null) {
            $query->andWhere('a.pole = :pole')->setParameter('pole', $idPole);
        }

        if ($formeJuridique != null) {
            $query->andWhere('d.formeJuridique = :formeJuridique')->setParameter('formeJuridique', $formeJuridique);
        }


        $query->orderBy('a.id', 'desc');

        $results = $query->getQuery()->getResult();
		//die(dump($entreprise));


        //die(dump($query->getQuery()));
        $tabResult = array();
        $i = 0;
        foreach ($results as $result) {

			
			$pole = $this->getEntityManager()->getRepository('ParametrageBundle:Pole')->find($result['1']);
			
			if(strtoupper($pole->getSigle()) != "CNSS" && strtoupper($pole->getSigle()) != "CT")
			{
				$tabResult[$i]['pole'] = $pole->getNom();
				$tabResult[$i]['abreviationPole'] = $pole->getNom();   //a la place de abbreviation en attendant
				$tabResult[$i]['montant'] = $result['2'];
			}
            $i++;
        }
        return $tabResult;
    }

    public function findBrouillardByParametres($dateDebut, $dateFin, $entreprise, $idPole = null, $formeJuridique = null, $idLangue = null) {

        $query = "SELECT distinct(d.idFormeJuridique), d.denominationSociale FROM repartitionquittance r join dossierDemande d on r.idDossierDemande = d.id where 1=1 ";

		if ($entreprise != '') {
			//die(dump($entreprise));
            $query = $query . " and r.idEntreprise =  " . $entreprise;
        }
		
        if ($dateDebut != '') {
            $dateDebutInverse = new DateTime($dateDebut);

            $query = $query . " and DATEDIFF(r.datePaiement, '" . $dateDebutInverse->format('Y-m-d H:i:s') . "') >= 0";
        }

        if ($dateFin != '') {
            $dateFinInverse = new DateTime($dateFin);
            $query = $query . " and DATEDIFF(r.datePaiement, '" . $dateFinInverse->format('Y-m-d H:i:s') . "') <= 0";
        }

        if (($dateDebut == '') && ($dateFin == '')) {
            $today = date('Y-m-d');
            $dateDebutInverse = new DateTime($today);
            $dateFinInverse = new DateTime($today);
            $query = $query . " and DATEDIFF(r.datePaiement, '" . $dateDebutInverse->format('Y-m-d H:i:s') . "') >= 0 and DATEDIFF(r.datePaiement, '" . $dateFinInverse->format('Y-m-d H:i:s') . "') <= 0 ";
        }

        if ($formeJuridique != null) {
            $query = $query . " and d.idFormeJuridique =  " . $formeJuridique;
        }

        $query = $query . " group by d.idFormeJuridique";

		//die(dump($query));
        $stmt = $this->getEntityManager()->getConnection()->prepare($query);
        $stmt->execute();
        $results = $stmt->fetchAll();

		
        $tabResult = array();
        $i = 0;
        foreach ($results as $result) {

            $slqRequete = "SELECT p.id as idPole, SUM(r.montantVerse) as sommeMontant FROM repartitionquittance r join pole p on r.idPole = p.id join dossierDemande d on r.idDossierDemande = d.id where p.sigle != 'CNSS' and p.sigle != 'CT' and d.idFormeJuridique =" . $result['idFormeJuridique'];
			
			if ($entreprise != '') {
				$slqRequete = $slqRequete . " and r.idEntreprise =  " . $entreprise;
			}
			
            if ($dateDebut != '') {
                $slqRequete = $slqRequete . " and DATEDIFF(r.datePaiement,'" . $dateDebutInverse->format('Y-m-d H:i:s') . "') >= 0";
            }

            if ($dateFin != '') {
                $slqRequete = $slqRequete . " and DATEDIFF(r.datePaiement, '" . $dateFinInverse->format('Y-m-d H:i:s') . "') <= 0";
            }

            if (($dateDebut == '') && ($dateFin == '')) {
                $today = date('Y-m-d');
                $dateDebutInverse = new DateTime($today);
                $dateFinInverse = new DateTime($today);
                $slqRequete = $slqRequete . " and DATEDIFF(r.datePaiement, '" . $dateDebutInverse->format('Y-m-d H:i:s') . "') >= 0 and DATEDIFF(r.datePaiement, '" . $dateFinInverse->format('Y-m-d H:i:s') . "') <= 0";
            }

            if ($idPole != null) {
                $slqRequete = $slqRequete . "and r.idPole = " . $idPole;
            }

            $slqRequete = $slqRequete . " group by p.id order by p.nom asc";


            $stmt = $this->getEntityManager()->getConnection()->prepare($slqRequete);
            $stmt->execute();
            $results2 = $stmt->fetchAll();

            if ($result['idFormeJuridique'] != null) {
                $sqlF = "select libelle from formeJuridiqueTraduction where idLangue=" . $idLangue . " and idFormeJuridique =" . $result['idFormeJuridique'];
                $stmt = $this->getEntityManager()->getConnection()->prepare($sqlF);
                $stmt->execute();
                $resultsfJ = $stmt->fetchAll();
            }


            $libFormeJuridique = '';
            foreach ($resultsfJ as $fj) {
                $libFormeJuridique = $fj["libelle"];
            }

            $tabResult[$i]['idDossierDemande'] = $result['idFormeJuridique'];
            $tabResult[$i]['formeJuridique'] = $libFormeJuridique; //$result['numeroDossier'];			
            $tabResult[$i]['denominationSociale'] = $result['denominationSociale'];
            $tabResult[$i]['listeMontant'] = $results2;

            $i++;
        }
        //
        return $tabResult;
    }

    public function findBrouillardPoleByParameters($dateDebut, $dateFin, $entreprise, $idPole, $formeJuridique = null, $idLangue = null) {
        $query = $this->createQueryBuilder('a')->join('a.dossierDemande', 'd')
                ->join('d.formeJuridique', 'f')
                ->select('IDENTITY(a.pole)', 'SUM(a.montantVerse) as montant', 'a.datePaiement', 'd.numeroDossier', 'd.denominationSociale', 'f.id')
                ->where('a.pole = :pole')->setParameter('pole', $idPole)
                ->andWhere('a.datePaiement is not null');

		
		if ($entreprise != '') {
			$query->andWhere('a.entreprise =:entreprise ')
			->setParameter('entreprise', $entreprise);
        }
		

        if ($dateDebut != '') {
            $dateDebutInverse = new DateTime($dateDebut);
            $query->andWhere('DATE_DIFF(a.datePaiement,:dateDebut)>=0')
                    ->setParameter('dateDebut', $dateDebutInverse);
        }

        if ($dateFin != '') {
            $dateFinInverse = new DateTime($dateFin);
            $query->andWhere('DATE_DIFF(a.datePaiement,:dateFin)<=0')
                    ->setParameter('dateFin', $dateFinInverse);
        }

        if (($dateDebut == '') && ($dateFin == '')) {
            $today = date('Y-m-d');
            $query->andWhere('DATE_DIFF(a.datePaiement,:dateFin)<=0')
                    ->setParameter('dateFin', new DateTime($today));
            $query->andWhere('DATE_DIFF(a.datePaiement,:dateDebut)>=0')
                    ->setParameter('dateDebut', new DateTime($today));
        }

        if ($formeJuridique != null) {
            $query->andWhere('d.formeJuridique = :formeJuridique')->setParameter('formeJuridique', $formeJuridique);
        }

        $query->groupBy('d.formeJuridique');

        $results = $query->getQuery()->getResult();
		
        $tabResult = array();
        $i = 0;
        foreach ($results as $result) {


            $formeJuridiqueLibelle = $this->getEntityManager()->getRepository('BanquemondialeBundle:FormeJuridiqueTraduction')->findOneBy(array('formeJuridique' => $result['id'], 'langue' => $idLangue));

            if ($formeJuridiqueLibelle) {
                $tabResult[$i]['formeJuridique'] = $formeJuridiqueLibelle->getLibelle();
            } else {
                $tabResult[$i]['formeJuridique'] = '';
            }
            $tabResult[$i]['montant'] = $result['montant'];
            $i++;
        }

        return $tabResult;
    }

}
